{"version":3,"sources":["components/Dropdown/index.js","static/constants.js","components/Visualization/index.js","App.jsx","serviceWorker.js","index.js"],"names":["Dropdown","props","options","updateSel","inputLabel","useRef","useState","val","setValue","menuList","opts","menuItems","push","MenuItem","value","key","forEach","opt","idx","label","mItem","generateMenuItems","FormControl","variant","className","InputLabel","ref","id","Select","labelId","onChange","event","newVal","target","autoWidth","description","disulfideBonds","glycoslation","length","initialOptions","constants","COLOR_PALLETE","Visualization","height","width","currSelection","svgRef","pairRanking","array","pair","total","low","high","i","currLow","currHigh","calculateBondRanking","map","bondPos","split","el","atom","parseInt","margin","top","right","bottom","left","innerWidth","innerHeight","SULFIDE_POS","SPINE_HEIGHT","xScale","scaleLinear","domain","range","bondHeight","useEffect","svg","select","style","g","append","attr","attachSpine","x","y","text","attachSulfides","CIRCLE_RADIUS","GLYCO_LINK_LENGTH","attachGlycoBonds","attachNTerminus","current","Number","isInteger","defaultProps","window","App","updateSelection","StylesProvider","injectFirst","index","setTimeout","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ab1d1ce0.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport './index.scss';\n\n/*\n * Drop down menu to select protein to visualize.\n */\nconst Dropdown = props => {\n  const { options, updateSel } = props;\n  const inputLabel = useRef(null);\n  const [val, setValue] = useState('');\n\n  const handleChange = event => {\n    const {\n      target: { value: newVal }\n    } = event;\n    setValue(newVal);\n    updateSel(newVal);\n  };\n\n  const generateMenuItems = opts => {\n    const menuItems = [];\n    menuItems.push(\n      <MenuItem value=\" \" key=\"default\">\n        None\n      </MenuItem>\n    );\n\n    opts.forEach((opt, idx) => {\n      const { value, label } = opt;\n      const mItem = (\n        <MenuItem value={idx} key={`key${value}`}>\n          {label}\n        </MenuItem>\n      );\n      menuItems.push(mItem);\n    });\n    return menuItems;\n  };\n\n  const menuList = generateMenuItems(options);\n\n  return (\n    <FormControl variant=\"outlined\" className=\"drop-down\">\n      <InputLabel ref={inputLabel} id=\"demo-simple-select-outlined-label\">\n        Protein Name\n      </InputLabel>\n      <Select\n        labelId=\"demo-simple-select-outlined-label\"\n        id=\"demo-simple-select-outlined\"\n        value={val}\n        onChange={handleChange}\n        autoWidth\n      >\n        {menuList}\n      </Select>\n    </FormControl>\n  );\n};\n\nDropdown.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.object).isRequired,\n  updateSel: PropTypes.func.isRequired\n};\n\nexport default Dropdown;\n","const initialOptions = [\n  {\n    value: 'HLAA_HUMAN',\n    label: 'HLAA_HUMAN',\n    description:\n      'HLA class I histocompatibility antigen, A alpha chain (Human leukocyte antigen A) (HLA-A)',\n    disulfideBonds: ['125 188', '227 283'],\n    glycoslation: ['110'],\n    length: 365\n  },\n  {\n    value: 'ELNE_HUMAN',\n    label: 'ELNE_HUMAN',\n    description:\n      'Neutrophil elastase (EC 3.4.21.37) (Bone marrow serine protease) (Elastase-2) (Human leukocyte elastase) (HLE) (Medullasin) (PMN elastase)',\n    disulfideBonds: ['55 71', '151 208', '181 187', '198 223'],\n    glycoslation: ['88', '124', '173'],\n    length: 267\n  },\n  {\n    value: 'GRAB_HUMAN',\n    label: 'GRAB_HUMAN',\n    description:\n      'Granzyme B (EC 3.4.21.79) (C11) (CTLA-1) (Cathepsin G-like 1) (CTSGL1) (Cytotoxic T-lymphocyte proteinase 2) (Lymphocyte protease) (Fragmentin-2) (Granzyme-2) (Human lymphocyte protein) (HLP) (SECT) (T-cell serine protease 1-3E)',\n    disulfideBonds: ['49 65', '142 209', '173 188'],\n    glycoslation: ['71', '104'],\n    length: 247\n  }\n];\n\nconst COLOR_PALLETE = [\n  '#c76861',\n  '#e6c11e',\n  '#90de1b',\n  '#1bde97',\n  '#1bc7de',\n  '#1b66de',\n  '#421bde',\n  '#901bde',\n  '#d618d3',\n  '#d6186a'\n];\n\nexport default { initialOptions, COLOR_PALLETE };\n","import React, { useRef, useEffect, useState } from 'react';\nimport {\n  select,\n  csv,\n  scaleLinear,\n  selectAll,\n  max,\n  scaleBand,\n  axisLeft,\n  axisBottom\n} from 'd3';\nimport PropTypes from 'prop-types';\nimport constants from '../../static/constants';\nimport './index.scss';\n\nconst CIRCLE_RADIUS = 5;\nconst SPINE_HEIGHT = 30;\n\nconst { initialOptions, COLOR_PALLETE } = constants;\n\nconst calculateBondRanking = array => {\n  const pairRanking = [];\n  array.forEach((pair, idx) => {\n    let total = 1;\n    const [low, high] = pair;\n    for (let i = 0; i < array.length; i += 1) {\n      if (idx !== i) {\n        const [currLow, currHigh] = array[i];\n        if (low < currLow && high > currHigh) {\n          total += 1;\n        }\n        if (low < currLow && high > currLow && high < currHigh) {\n          total += 0.5;\n        }\n        if (low > currLow && low < currHigh && high > currHigh) {\n          total += 0.5;\n        }\n      }\n    }\n    pairRanking.push(total);\n  });\n  return pairRanking;\n};\n\nfunction Visualization(props) {\n  const { height, width, currSelection } = props;\n  const svgRef = useRef(null);\n  const [mounted, setMounted] = useState(false);\n\n  const glycoBonds = initialOptions[currSelection].disulfideBonds.map(pair => {\n    const bondPos = [];\n    const atoms = pair.split(' ');\n    atoms.forEach(el => {\n      const atom = parseInt(el, 10);\n      bondPos.push(atom);\n    });\n    return bondPos;\n  });\n  const pairRanking = calculateBondRanking(glycoBonds);\n\n  const margin = {\n    top: height / 15,\n    right: width / 15,\n    bottom: height / 15,\n    left: width / 15\n  };\n  const innerWidth = width - margin.left - margin.right;\n  const innerHeight = height - margin.top - margin.bottom;\n  const SULFIDE_POS = innerHeight / 2 + SPINE_HEIGHT / 2;\n  const SULFIDE_BOND_LENGTH = 40;\n  const SULFIDE_ATOM_OFFSET = 20;\n\n  const GLYCO_STEM_LENGTH = 60;\n  const GLYCO_LINK_LENGTH = 10;\n\n  const xScale = scaleLinear()\n    .domain([0, initialOptions[currSelection].length])\n    .range([0, innerWidth]);\n\n  const bondHeight = idx => {\n    const bHeight = SULFIDE_POS + SULFIDE_BOND_LENGTH * pairRanking[idx];\n    return bHeight;\n  };\n\n  const attachGlycoBonds = g => {\n    const { glycoslation } = initialOptions[currSelection];\n\n    const gBonds = glycoslation.map(el => parseInt(el, 10));\n    gBonds.forEach(el => {\n      const atom = g.append('text');\n      atom\n        .attr('dx', xScale(el) - 5)\n        .attr('dy', SULFIDE_POS + 5)\n        .text(() => 'N');\n\n      const stem = g.append('line');\n      stem\n        .attr('x1', xScale(el))\n        .attr('y1', SULFIDE_POS - 10)\n        .attr('x2', xScale(el))\n        .attr('y2', SULFIDE_POS - GLYCO_STEM_LENGTH)\n        .style('stroke', 'black');\n\n      const mol1 = g.append('circle');\n      mol1\n        .attr('cx', xScale(el))\n        .attr('cy', SULFIDE_POS - GLYCO_STEM_LENGTH)\n        .attr('r', CIRCLE_RADIUS + 3)\n        .style('stroke', 'black')\n        .style('fill', 'black');\n\n      const link = g.append('line');\n      link\n        .attr('x1', xScale(el))\n        .attr('y1', SULFIDE_POS - GLYCO_STEM_LENGTH)\n        .attr('x2', xScale(el))\n        .attr('y2', SULFIDE_POS - GLYCO_STEM_LENGTH - GLYCO_LINK_LENGTH * 2)\n        .style('stroke', 'black');\n\n      const link2 = g.append('line');\n      link2\n        .attr('x1', xScale(el))\n        .attr('y1', SULFIDE_POS - GLYCO_STEM_LENGTH - GLYCO_LINK_LENGTH * 2)\n        .attr('x2', xScale(el))\n        .attr('y2', SULFIDE_POS - GLYCO_STEM_LENGTH - GLYCO_LINK_LENGTH * 3.5)\n        .style('stroke', 'black');\n      const link3 = g.append('line');\n      link3\n        .attr('x1', xScale(el))\n        .attr('y1', SULFIDE_POS - GLYCO_STEM_LENGTH - GLYCO_LINK_LENGTH * 3.5)\n        .attr('x2', xScale(el))\n        .attr('y2', SULFIDE_POS - GLYCO_STEM_LENGTH - GLYCO_LINK_LENGTH * 4.5)\n        .style('stroke', 'black');\n\n      const mol2 = g.append('circle');\n      mol2\n        .attr('cx', xScale(el))\n        .attr('cy', SULFIDE_POS - GLYCO_STEM_LENGTH - GLYCO_LINK_LENGTH * 2)\n        .attr('r', CIRCLE_RADIUS + 3)\n        .style('stroke', 'black')\n        .style('fill', 'grey');\n\n      const mol3 = g.append('rect');\n      mol3\n        .attr('width', 14)\n        .attr('height', 14)\n        .attr('x', xScale(el) - 7)\n        .attr('y', SULFIDE_POS - GLYCO_STEM_LENGTH - GLYCO_LINK_LENGTH * 5)\n        .style('fill', 'white')\n        .style('stroke', 'black');\n    });\n  };\n\n  const attachSulfides = g => {\n    const { disulfideBonds } = initialOptions[currSelection];\n\n    const bonds = disulfideBonds.map(pair => {\n      const bondPos = [];\n      const atoms = pair.split(' ');\n      atoms.forEach(el => {\n        const atom = parseInt(el, 10);\n        bondPos.push(atom);\n      });\n      return bondPos;\n    });\n\n    bonds.forEach((pair, idx) => {\n      const [x, y] = pair;\n      pair.forEach(el => {\n        const atom = g.append('circle');\n        atom\n          .attr('cx', xScale(el))\n          .attr('cy', SULFIDE_POS)\n          .attr('r', CIRCLE_RADIUS)\n          .style('stroke', 'black')\n          .style('fill', COLOR_PALLETE[idx % COLOR_PALLETE.length]);\n\n        const text = g.append('text');\n        text\n          .attr('dx', xScale(el) - 10)\n          .attr('dy', SULFIDE_POS + 20)\n          .text(() => el)\n          .attr('class', 'sulfide-labels');\n\n        const bond = g.append('line');\n        bond\n          .attr('x1', xScale(el))\n          .attr('y1', SULFIDE_POS + 20)\n          .attr('x2', xScale(el))\n          .attr('y2', bondHeight(idx))\n          .style('stroke', 'black');\n        const sulfide = g.append('text');\n        sulfide\n          .attr('dx', xScale(el) - 5)\n          .attr('dy', bondHeight(idx) + SULFIDE_ATOM_OFFSET)\n          .text(() => 'S');\n      });\n      const link = g.append('line');\n      link\n        .attr('x1', xScale(x))\n        .attr('y1', bondHeight(idx))\n        .attr('x2', xScale(y))\n        .attr('y2', bondHeight(idx))\n        .style('stroke', 'black');\n    });\n  };\n\n  const attachSpine = g => {\n    const spineBase = g.append('rect');\n    spineBase\n      .attr('width', innerWidth - 2 * margin.left)\n      .attr('height', SPINE_HEIGHT)\n      .attr('x', margin.left)\n      .attr('y', innerHeight / 2)\n      .style('fill', 'white')\n      .style('stroke', 'black');\n  };\n\n  const attachNTerminus = g => {\n    const NTerm = g.append('text');\n    NTerm.attr('dx', xScale(0) - 2)\n      .attr('dy', innerHeight / 2 + 25)\n      .text(() => 'NH2--');\n  };\n\n  useEffect(() => {\n    const svg = select('#svg');\n    svg.style('background-color', 'white');\n\n    const g = svg.append('g');\n    g.attr('transform', `translate(${margin.left}, ${margin.top})`);\n    attachSpine(g);\n    attachSulfides(g);\n    attachGlycoBonds(g);\n    attachNTerminus(g);\n  }, [svgRef.current]);\n\n  const svg = Number.isInteger(currSelection) ? (\n    <svg height={`${height}`} width={`${width}`} ref={svgRef} id=\"svg\">\n      <rect />\n    </svg>\n  ) : null;\n\n  return <div>{svg}</div>;\n}\n\nVisualization.propTypes = {\n  height: PropTypes.number,\n  width: PropTypes.number,\n  currSelection: PropTypes.number.isRequired\n};\n\nVisualization.defaultProps = {\n  height: 500,\n  width: 500\n};\n\nexport default Visualization;\n","import React, { useState } from 'react';\nimport { StylesProvider } from '@material-ui/core';\nimport Dropdown from './components/Dropdown';\nimport constants from './static/constants';\nimport Visualization from './components/Visualization';\nimport './App.scss';\n\nconst { initialOptions } = constants;\n\nconst { innerWidth, innerHeight } = window;\n\nfunction App() {\n  const [currSelection, updateSelection] = useState(null);\n\n  const updateSel = index => {\n    updateSelection(null);\n    setTimeout(() => updateSelection(index), 500);\n  };\n\n  return (\n    <StylesProvider injectFirst>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Disulfide bond and Glycoslyation Visualization\n        </header>\n        <div className=\"App-dropdown\">\n          <Dropdown options={initialOptions} updateSel={updateSel} />\n        </div>\n        {currSelection != null && Number.isInteger(currSelection) ? (\n          <Visualization\n            width={innerWidth}\n            height={innerHeight}\n            currSelection={currSelection}\n          />\n        ) : (\n          <div className=\"App-canvas\" />\n        )}\n      </div>\n    </StylesProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable no-undef */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}