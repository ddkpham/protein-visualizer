{"version":3,"sources":["components/Dropdown/index.js","static/constants.js","components/Legend/index.js","components/Visualization/ProteinWindow/index.js","components/Visualization/index.js","components/AppBar/index.js","components/Introduction/index.js","parser/index.js","App.jsx","serviceWorker.js","index.js","static/sunlab.png","parser/proteins.csv"],"names":["Dropdown","props","options","updateSel","inputLabel","useRef","useState","val","setValue","menuList","opts","menuItems","push","MenuItem","value","key","forEach","opt","idx","label","mItem","generateMenuItems","FormControl","variant","className","InputLabel","ref","id","Select","labelId","onChange","event","newVal","target","autoWidth","useStyles","makeStyles","root","Width","bullet","display","margin","transform","title","fontSize","textDecoration","color","fontWeight","marginBottom","pos","Legend","glycoslation","disulfideBonds","toggleGlyco","toggleSulfide","length","showGlyco","setShowGlyco","showSulfide","setShowSulfide","classes","handleToggle","bond","Card","raised","CardContent","Typography","gutterBottom","Tooltip","placement","IconButton","aria-label","onClick","defaultProps","ProteinWindow","updateWindowStart","updateWindowEnd","TextField","defaultValue","ev","COLOR_PALLETE","constants","Visualization","height","initialWidth","width","currSelection","isLegendOpen","initialOptions","scaleFactor","fullScale","setFullScaleDisabled","proteinLength","svgRef","nGlycosylation","oGlycosylation","windowSvgRef","start","end","windowPos","setWindowPos","windowStart","windowEnd","showDisulfide","setShowDisulfide","scaleVisualization","top","right","bottom","left","innerHeight","SULFIDE_POS","SPINE_HEIGHT","WINDOW_SPINE_START_POS","SPINE_WIDTH","WINDOW_SPINE_WIDTH","glycoBonds","map","pair","bondPos","split","el","atom","parseInt","pairRanking","array","total","low","high","i","currLow","currHigh","calculateBondRanking","xScale","scaleLinear","domain","range","windowScale","bondHeight","renderVisualization","isWindowView","svg","select","style","translateX","translateY","g","append","attr","spineBase","spineWidth","startPos","attachSpine","bonds","scale","filter","x","y","leftBonds","b","b1","b2","console","log","text","attachSulfides","gBonds","CIRCLE_RADIUS","GLYCO_LINK_LENGTH","attachGlycoBonds","SPINE_START_POS","attachNTerminus","useEffect","selectAll","remove","document","getElementById","marginLeft","window","innerWidth","current","Number","isInteger","overflow","windowSvg","newStart","newEnd","theme","flexGrow","menuButton","marginRight","spacing","CustomAppBar","toggleLegend","setScaleFactor","toggleFullScale","disableFullScale","anchorEl","setAnchorEl","open","Boolean","handleClose","AppBar","Toolbar","edge","disabled","aria-controls","aria-haspopup","evt","currentTarget","Menu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","paper","Slider","getAriaValueText","aria-labelledby","valueLabelDisplay","step","marks","min","max","Introduction","CardActionArea","CardMedia","component","alt","image","Logo","location","href","getData","a","async","csv","csvData","data","arrayStrConversion","str","newStr","replace","JSON","parse","getProteins","proteinsData","proteins","protein","description","Glycosylation","Length","App","updateSelection","showIntro","setShowIntro","setScaleVisualization","setLegendState","proteinOpts","setProteinOpts","setFullScale","fullScaleDisabled","then","intro","StylesProvider","injectFirst","index","setTimeout","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.31d88e34.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport './index.scss';\n\n/*\n * Drop down menu to select protein to visualize.\n */\nconst Dropdown = props => {\n  const { options, updateSel } = props;\n  const inputLabel = useRef(null);\n  const [val, setValue] = useState('');\n\n  const handleChange = event => {\n    const {\n      target: { value: newVal }\n    } = event;\n    setValue(newVal);\n    updateSel(newVal);\n  };\n\n  const generateMenuItems = opts => {\n    const menuItems = [];\n    menuItems.push(\n      <MenuItem value=\" \" key=\"default\">\n        None\n      </MenuItem>\n    );\n\n    opts.forEach((opt, idx) => {\n      const { value, label } = opt;\n      const mItem = (\n        <MenuItem value={idx} key={`key${value}`}>\n          {label}\n        </MenuItem>\n      );\n      menuItems.push(mItem);\n    });\n    return menuItems;\n  };\n\n  const menuList = generateMenuItems(options);\n\n  return (\n    <FormControl variant=\"outlined\" className=\"drop-down\">\n      <InputLabel ref={inputLabel} id=\"demo-simple-select-outlined-label\">\n        Protein Name\n      </InputLabel>\n      <Select\n        labelId=\"demo-simple-select-outlined-label\"\n        id=\"demo-simple-select-outlined\"\n        value={val}\n        onChange={handleChange}\n        autoWidth\n      >\n        {menuList}\n      </Select>\n    </FormControl>\n  );\n};\n\nDropdown.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.object).isRequired,\n  updateSel: PropTypes.func.isRequired\n};\n\nexport default Dropdown;\n","const initialOptions = [\n  {\n    value: 'HLAA_HUMAN',\n    label: 'HLAA_HUMAN',\n    description:\n      'HLA class I histocompatibility antigen, A alpha chain (Human leukocyte antigen A) (HLA-A)',\n    disulfideBonds: ['125 188', '227 283'],\n    glycoslation: ['110'],\n    length: 365\n  },\n  {\n    value: 'ELNE_HUMAN',\n    label: 'ELNE_HUMAN',\n    description:\n      'Neutrophil elastase (EC 3.4.21.37) (Bone marrow serine protease) (Elastase-2) (Human leukocyte elastase) (HLE) (Medullasin) (PMN elastase)',\n    disulfideBonds: ['55 71', '151 208', '181 187', '198 223'],\n    glycoslation: ['88', '124', '173'],\n    length: 267\n  },\n  {\n    value: 'GRAB_HUMAN',\n    label: 'GRAB_HUMAN',\n    description:\n      'Granzyme B (EC 3.4.21.79) (C11) (CTLA-1) (Cathepsin G-like 1) (CTSGL1) (Cytotoxic T-lymphocyte proteinase 2) (Lymphocyte protease) (Fragmentin-2) (Granzyme-2) (Human lymphocyte protein) (HLP) (SECT) (T-cell serine protease 1-3E)',\n    disulfideBonds: ['49 65', '142 209', '173 188'],\n    glycoslation: ['71', '104'],\n    length: 247\n  }\n];\n\nconst COLOR_PALLETE = [\n  '#c76861',\n  '#e6c11e',\n  '#90de1b',\n  '#1bde97',\n  '#1bc7de',\n  '#1b66de',\n  '#421bde',\n  '#901bde',\n  '#d618d3',\n  '#d6186a'\n];\n\nexport default { initialOptions, COLOR_PALLETE };\n","import React, { useState } from 'react';\nimport {\n  Card,\n  CardContent,\n  Typography,\n  IconButton,\n  Tooltip\n} from '@material-ui/core';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport PropTypes from 'prop-types';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport './index.scss';\n\nconst useStyles = makeStyles({\n  root: {\n    Width: 275\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)'\n  },\n  title: {\n    fontSize: 20,\n    textDecoration: 'none',\n    color: '#cb2d39',\n    fontWeight: 'bold',\n    marginBottom: '15px'\n  },\n  pos: {\n    marginBottom: 12\n  }\n});\n/**\n *\n * @param {Object} props\n * @property {Object} glycoslation object containing glyco bond info\n * @property {Object} disulfideBonds object containing sulfide bond info\n * @property {func} toggleGlyco Function that toggles glyco bond visibility\n * @property {func} toggleSulfide Function that toggles sulfide bond visibility\n * @property {integar} length total length of protein structure\n */\nfunction Legend(props) {\n  const {\n    glycoslation,\n    disulfideBonds,\n    toggleGlyco,\n    toggleSulfide,\n    length\n  } = props;\n  const [showGlyco, setShowGlyco] = useState(true);\n  const [showSulfide, setShowSulfide] = useState(true);\n  const classes = useStyles();\n\n  const handleToggle = bond => {\n    if (bond === 'sulfide') {\n      toggleSulfide(!showSulfide);\n      setShowSulfide(!showSulfide);\n    } else {\n      toggleGlyco(!showGlyco);\n      setShowGlyco(!showGlyco);\n    }\n  };\n\n  return (\n    <Card variant=\"outlined\" raised classes={{ root: 'legend--wrapper' }}>\n      <CardContent>\n        <div className=\"legend--header\">\n          <Typography\n            className={classes.title}\n            color=\"textSecondary\"\n            gutterBottom\n            display=\"inline\"\n          >\n            Legend\n          </Typography>\n        </div>\n        <div className=\"legend--menuItem\">\n          <Typography>\n            Total Glyco Bonds:\n            <Typography display=\"inline\" classes={{ root: 'bold-text' }}>\n              {glycoslation.length}\n            </Typography>\n          </Typography>\n          <div className={`button-visibility${showGlyco ? '--on' : '--off'}`}>\n            <Tooltip title=\"toggle visibility\" placement=\"right-end\">\n              <IconButton\n                aria-label=\"delete\"\n                className={{ root: 'on' }}\n                onClick={() => handleToggle('glyco')}\n              >\n                <VisibilityIcon />\n              </IconButton>\n            </Tooltip>\n          </div>\n        </div>\n        <div className=\"legend--menuItem\">\n          <Typography>\n            Total Sulfide Bonds:\n            <Typography display=\"inline\" classes={{ root: 'bold-text' }}>\n              {disulfideBonds.length}\n            </Typography>\n          </Typography>\n          <div className={`button-visibility${showSulfide ? '--on' : '--off'}`}>\n            <Tooltip title=\"toggle visibility\" placement=\"right-end\">\n              <IconButton\n                aria-label=\"delete\"\n                onClick={() => handleToggle('sulfide')}\n              >\n                <VisibilityIcon />\n              </IconButton>\n            </Tooltip>\n          </div>\n        </div>\n        <div className=\"legend--menuItem\">\n          <Typography>\n            Total Protein Length:\n            <Typography display=\"inline\" classes={{ root: 'bold-text' }}>\n              {length}\n            </Typography>\n          </Typography>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nLegend.propTypes = {\n  glycoslation: PropTypes.arrayOf(PropTypes.string).isRequired,\n  disulfideBonds: PropTypes.arrayOf(PropTypes.string).isRequired,\n  toggleGlyco: PropTypes.func,\n  toggleSulfide: PropTypes.func,\n  length: PropTypes.number.isRequired\n};\n\nLegend.defaultProps = {\n  toggleGlyco: () => {},\n  toggleSulfide: () => {}\n};\n\nexport default Legend;\n","import React, { useState } from 'react';\nimport {\n  Card,\n  CardContent,\n  IconButton,\n  Typography,\n  TextField\n} from '@material-ui/core';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport PropTypes from 'prop-types';\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport './index.scss';\n\nconst useStyles = makeStyles({\n  root: {\n    Width: 275\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)'\n  },\n  title: {\n    fontSize: 20,\n    textDecoration: 'none',\n    color: '#cb2d39',\n    fontWeight: 'bold',\n    marginBottom: '10px'\n  },\n  pos: {\n    marginBottom: 12\n  }\n});\n\nfunction ProteinWindow(props) {\n  const {\n    toggleGlyco,\n    toggleSulfide,\n    length,\n    updateWindowStart,\n    updateWindowEnd\n  } = props;\n  const [showGlyco, setShowGlyco] = useState(true);\n  const [showSulfide, setShowSulfide] = useState(true);\n  const classes = useStyles();\n\n  const [start, setStart] = useState(0);\n  const [end, setEnd] = useState(length);\n\n  const handleToggle = bond => {\n    if (bond === 'sulfide') {\n      toggleSulfide(!showSulfide);\n      setShowSulfide(!showSulfide);\n    } else {\n      toggleGlyco(!showGlyco);\n      setShowGlyco(!showGlyco);\n    }\n  };\n\n  return (\n    <div className=\"window--wrapper\">\n      <Card variant=\"outlined\" classes={{ root: 'window--display' }}>\n        <CardContent>\n          <Typography\n            className={classes.title}\n            color=\"textSecondary\"\n            gutterBottom\n          >\n            Protein Window Input\n          </Typography>\n\n          <div className=\"window--menuItem\">\n            <Typography>\n              Total Protein Length:\n              <Typography display=\"inline\" classes={{ root: 'bold-text' }}>\n                {length}\n              </Typography>\n            </Typography>\n          </div>\n          <div className=\"window--menuItem\">\n            <TextField\n              id=\"outlined-basic\"\n              defaultValue={0}\n              label=\"Start\"\n              variant=\"outlined\"\n              onChange={ev => updateWindowStart(ev.target.value)}\n            />\n            <TextField\n              id=\"outlined-basic\"\n              defaultValue={length}\n              label=\"End\"\n              variant=\"outlined\"\n              onChange={ev => updateWindowEnd(ev.target.value)}\n            />\n            {/* TODO: Decide if we want users to set window view or if it should stay automatic */}\n            {/* <div className=\"button-visibility--on\">\n              <IconButton onClick={() => console.log('clicked')}>\n                <ZoomInIcon />\n              </IconButton>\n            </div> */}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nProteinWindow.propTypes = {\n  toggleGlyco: PropTypes.func,\n  toggleSulfide: PropTypes.func,\n  length: PropTypes.number.isRequired\n};\n\nProteinWindow.defaultProps = {\n  toggleGlyco: () => {},\n  toggleSulfide: () => {}\n};\n\nexport default ProteinWindow;\n","import React, { useRef, useEffect, useState } from 'react';\nimport { select, scaleLinear, selectAll } from 'd3';\nimport PropTypes from 'prop-types';\nimport constants from '../../static/constants';\nimport Legend from '../Legend';\nimport ProteinWindow from './ProteinWindow';\n\nimport './index.scss';\n\nconst CIRCLE_RADIUS = 5;\nconst SPINE_HEIGHT = 30;\n\nconst { COLOR_PALLETE } = constants;\n\nconst calculateBondRanking = array => {\n  const pairRanking = [];\n  array.forEach((pair, idx) => {\n    let total = 1;\n    const [low, high] = pair;\n    for (let i = 0; i < array.length; i += 1) {\n      if (idx !== i) {\n        const [currLow, currHigh] = array[i];\n        if (low < currLow && high > currHigh) {\n          total += 1;\n        }\n        if (low < currLow && high > currLow && high < currHigh) {\n          total += 0.55;\n        }\n        if (low > currLow && low < currHigh && high > currHigh) {\n          total += 0.75;\n        }\n      }\n    }\n    pairRanking.push(total);\n  });\n  return pairRanking;\n};\n\nfunction Visualization(props) {\n  const {\n    height,\n    width: initialWidth,\n    currSelection,\n    isLegendOpen,\n    initialOptions,\n    scaleFactor,\n    fullScale,\n    setFullScaleDisabled\n  } = props;\n\n  const {\n    disulfideBonds,\n    glycoslation,\n    length: proteinLength,\n    nGlycosylation,\n    oGlycosylation\n  } = initialOptions[currSelection];\n\n  const svgRef = useRef(null);\n  const windowSvgRef = useRef(null);\n  const [windowPos, setWindowPos] = useState({ start: 0, end: proteinLength });\n  const { start: windowStart, end: windowEnd } = windowPos;\n  const [windowView, setWindowView] = useState(false);\n  const [showGlyco, setShowGlyco] = useState(true);\n  const [showDisulfide, setShowDisulfide] = useState(true);\n\n  const scaleVisualization = scaleFactor !== 1;\n  const scaledWidth = initialWidth * scaleFactor;\n\n  const margin = {\n    top: height / 15,\n    right: initialWidth / 15,\n    bottom: height / 15,\n    left: initialWidth / 15\n  };\n  const innerHeight = height - margin.top - margin.bottom;\n  const SULFIDE_POS = innerHeight / 2 + SPINE_HEIGHT / 2;\n  const SULFIDE_BOND_LENGTH = 40;\n  const SULFIDE_ATOM_OFFSET = 20;\n  const GLYCO_STEM_LENGTH = 60;\n  const GLYCO_LINK_LENGTH = 10;\n  const SPINE_START_POS = 30;\n  const WINDOW_SPINE_START_POS = 0.1 * margin.left;\n\n  const SPINE_WIDTH = scaledWidth - scaleFactor * 2 * margin.left;\n\n  const WINDOW_SPINE_WIDTH = initialWidth - 2 * margin.left;\n\n  const glycoBonds = initialOptions[currSelection].disulfideBonds.map(pair => {\n    const bondPos = [];\n    const atoms = pair.split(' ');\n    atoms.forEach(el => {\n      const atom = parseInt(el, 10);\n      bondPos.push(atom);\n    });\n    return bondPos;\n  });\n\n  const updateWindowStart = newStart => {\n    setWindowPos({ ...windowPos, start: parseInt(newStart, 10) });\n  };\n\n  const updateWindowEnd = newEnd => {\n    setWindowPos({ ...windowPos, end: parseInt(newEnd, 10) });\n  };\n\n  if (proteinLength < 3000) {\n    setFullScaleDisabled(true);\n  } else {\n    setFullScaleDisabled(false);\n  }\n  const pairRanking = calculateBondRanking(glycoBonds);\n\n  const xScale = scaleLinear()\n    .domain([0, proteinLength])\n    .range([\n      fullScale ? 0 : SPINE_START_POS,\n      fullScale ? proteinLength : SPINE_WIDTH\n    ]);\n\n  const windowScale = scaleLinear()\n    .domain([windowStart, windowEnd])\n    .range([\n      fullScale ? 0 : WINDOW_SPINE_START_POS,\n      fullScale ? proteinLength : WINDOW_SPINE_WIDTH\n    ]);\n\n  const toggleWindowView = () => {\n    setWindowView(!windowView);\n  };\n\n  const bondHeight = idx => {\n    const bHeight = SULFIDE_POS + SULFIDE_BOND_LENGTH * pairRanking[idx];\n    return bHeight;\n  };\n\n  const attachGlycoBonds = (g, isWindowView) => {\n    let gBonds = glycoslation.map(el => parseInt(el, 10));\n    if (isWindowView) {\n      gBonds = gBonds.filter(bond => bond >= windowStart && bond <= windowEnd);\n    }\n    const scale = isWindowView ? windowScale : xScale;\n    gBonds.forEach(el => {\n      const atom = g.append('text');\n\n      atom\n        .attr('dx', scale(el) - 5)\n        .attr('dy', SULFIDE_POS + 5)\n        .text(() => `N`)\n        .attr('class', 'glyco-labels');\n\n      const pos = g.append('text');\n      pos\n        .attr('dx', scale(el) + 3)\n        .attr('dy', SULFIDE_POS + 7)\n        .text(() => `${el}`)\n        .attr('class', 'glyco-labels--pos');\n\n      const stem = g.append('line');\n      stem\n        .attr('x1', scale(el))\n        .attr('y1', SULFIDE_POS - 10)\n        .attr('x2', scale(el))\n        .attr('y2', SULFIDE_POS - GLYCO_STEM_LENGTH)\n        .style('stroke', 'black');\n\n      const mol1 = g.append('circle');\n      mol1\n        .attr('cx', scale(el))\n        .attr('cy', SULFIDE_POS - GLYCO_STEM_LENGTH)\n        .attr('r', CIRCLE_RADIUS + 3)\n        .style('stroke', 'black')\n        .style('fill', 'black');\n\n      const link = g.append('line');\n      link\n        .attr('x1', scale(el))\n        .attr('y1', SULFIDE_POS - GLYCO_STEM_LENGTH)\n        .attr('x2', scale(el))\n        .attr('y2', SULFIDE_POS - GLYCO_STEM_LENGTH - GLYCO_LINK_LENGTH * 2)\n        .style('stroke', 'black');\n\n      const link2 = g.append('line');\n      link2\n        .attr('x1', scale(el))\n        .attr('y1', SULFIDE_POS - GLYCO_STEM_LENGTH - GLYCO_LINK_LENGTH * 2)\n        .attr('x2', scale(el))\n        .attr('y2', SULFIDE_POS - GLYCO_STEM_LENGTH - GLYCO_LINK_LENGTH * 3.5)\n        .style('stroke', 'black');\n      const link3 = g.append('line');\n      link3\n        .attr('x1', scale(el))\n        .attr('y1', SULFIDE_POS - GLYCO_STEM_LENGTH - GLYCO_LINK_LENGTH * 3.5)\n        .attr('x2', scale(el))\n        .attr('y2', SULFIDE_POS - GLYCO_STEM_LENGTH - GLYCO_LINK_LENGTH * 4.5)\n        .style('stroke', 'black');\n\n      const mol2 = g.append('circle');\n      mol2\n        .attr('cx', scale(el))\n        .attr('cy', SULFIDE_POS - GLYCO_STEM_LENGTH - GLYCO_LINK_LENGTH * 2)\n        .attr('r', CIRCLE_RADIUS + 3)\n        .style('stroke', 'black')\n        .style('fill', 'grey');\n\n      const mol3 = g.append('rect');\n      mol3\n        .attr('width', 14)\n        .attr('height', 14)\n        .attr('x', scale(el) - 7)\n        .attr('y', SULFIDE_POS - GLYCO_STEM_LENGTH - GLYCO_LINK_LENGTH * 5)\n        .style('fill', 'white')\n        .style('stroke', 'black');\n    });\n  };\n\n  const attachSulfides = (g, isWindowView) => {\n    let bonds = disulfideBonds.map(pair => {\n      const bondPos = [];\n      const atoms = pair.split(' ');\n      atoms.forEach(el => {\n        const atom = parseInt(el, 10);\n        bondPos.push(atom);\n      });\n      return bondPos;\n    });\n\n    const scale = isWindowView ? windowScale : xScale;\n    if (isWindowView) {\n      bonds = bonds.filter(bond => {\n        const [x, y] = bond;\n        return x >= windowStart && y <= windowEnd;\n      });\n\n      // attach bonds that arent fully in window\n      // 1. Bonds that cut off to the left\n\n      const leftBonds = disulfideBonds.filter(b => {\n        const [x, y] = b.split(' ');\n        const b1 = parseInt(x, 10);\n        const b2 = parseInt(y, 10);\n        return b1 < windowStart && b2 <= windowEnd && b2 > windowStart;\n      });\n\n      console.log('attachSulfides -> leftBonds', leftBonds);\n\n      leftBonds.forEach((pair, idx) => {\n        const [x, y] = pair.split(' ');\n        // attach sulfide\n        const atom = g.append('circle');\n        atom\n          .attr('cx', scale(y))\n          .attr('cy', SULFIDE_POS)\n          .attr('r', CIRCLE_RADIUS)\n          .style('stroke', 'black')\n          .style('fill', COLOR_PALLETE[idx % COLOR_PALLETE.length]);\n\n        // attach stem\n        const bond = g.append('line');\n        bond\n          .attr('x1', scale(y))\n          .attr('y1', SULFIDE_POS + 20)\n          .attr('x2', scale(y))\n          .attr('y2', bondHeight(idx))\n          .style('stroke', 'black');\n\n        const sulfide = g.append('text');\n        sulfide\n          .attr('dx', scale(y) - 5)\n          .attr('dy', bondHeight(idx) + SULFIDE_ATOM_OFFSET)\n          .text(() => 'S');\n\n        const pos = g.append('text');\n        pos\n          .attr('dx', scale(y) + 4)\n          .attr('dy', bondHeight(idx) + SULFIDE_ATOM_OFFSET + 5)\n          .text(() => `${y}`)\n          .attr('class', 'sulfide-labels--pos');\n\n        const link = g.append('line');\n        link\n          .attr('x1', WINDOW_SPINE_START_POS)\n          .attr('y1', bondHeight(idx))\n          .attr('x2', scale(y))\n          .attr('y2', bondHeight(idx))\n          .style('stroke', 'black');\n      });\n\n      const rightBonds = disulfideBonds.filter(b => {\n        const [x, y] = b.split(' ');\n        const b1 = parseInt(x, 10);\n        const b2 = parseInt(y, 10);\n        return b1 > windowStart && b1 <= windowEnd && b2 > windowEnd;\n      });\n\n      rightBonds.forEach((pair, idx) => {\n        const [x, y] = pair.split(' ');\n        // attach sulfide\n        const atom = g.append('circle');\n        atom\n          .attr('cx', scale(x))\n          .attr('cy', SULFIDE_POS)\n          .attr('r', CIRCLE_RADIUS)\n          .style('stroke', 'black')\n          .style('fill', COLOR_PALLETE[idx % COLOR_PALLETE.length]);\n\n        // attach stem\n        const bond = g.append('line');\n        bond\n          .attr('x1', scale(x))\n          .attr('y1', SULFIDE_POS + 20)\n          .attr('x2', scale(x))\n          .attr('y2', bondHeight(idx))\n          .style('stroke', 'black');\n\n        const sulfide = g.append('text');\n        sulfide\n          .attr('dx', scale(x) - 5)\n          .attr('dy', bondHeight(idx) + SULFIDE_ATOM_OFFSET)\n          .text(() => 'S');\n\n        const pos = g.append('text');\n        pos\n          .attr('dx', scale(x) + 4)\n          .attr('dy', bondHeight(idx) + SULFIDE_ATOM_OFFSET + 5)\n          .text(() => `${x}`)\n          .attr('class', 'sulfide-labels--pos');\n\n        const link = g.append('line');\n        link\n          .attr('x1', scale(x))\n          .attr('y1', bondHeight(idx))\n          .attr('x2', scale(windowEnd))\n          .attr('y2', bondHeight(idx))\n          .style('stroke', 'black');\n      });\n    }\n\n    bonds.forEach((pair, idx) => {\n      const [x, y] = pair;\n      pair.forEach(el => {\n        const atom = g.append('circle');\n        atom\n          .attr('cx', scale(el))\n          .attr('cy', SULFIDE_POS)\n          .attr('r', CIRCLE_RADIUS)\n          .style('stroke', 'black')\n          .style('fill', COLOR_PALLETE[idx % COLOR_PALLETE.length]);\n\n        const bond = g.append('line');\n        bond\n          .attr('x1', scale(el))\n          .attr('y1', SULFIDE_POS + 20)\n          .attr('x2', scale(el))\n          .attr('y2', bondHeight(idx))\n          .style('stroke', 'black');\n        const sulfide = g.append('text');\n        sulfide\n          .attr('dx', scale(el) - 5)\n          .attr('dy', bondHeight(idx) + SULFIDE_ATOM_OFFSET)\n          .text(() => 'S');\n\n        const pos = g.append('text');\n        pos\n          .attr('dx', scale(el) + 4)\n          .attr('dy', bondHeight(idx) + SULFIDE_ATOM_OFFSET + 5)\n          .text(() => `${el}`)\n          .attr('class', 'sulfide-labels--pos');\n      });\n      const link = g.append('line');\n      link\n        .attr('x1', scale(x))\n        .attr('y1', bondHeight(idx))\n        .attr('x2', scale(y))\n        .attr('y2', bondHeight(idx))\n        .style('stroke', 'black');\n    });\n  };\n\n  const attachSpine = (g, isWindowView) => {\n    const spineBase = g.append('rect');\n    let spineWidth = fullScale ? proteinLength : SPINE_WIDTH;\n    const startPos = isWindowView ? WINDOW_SPINE_START_POS : SPINE_START_POS;\n    if (isWindowView) {\n      spineWidth = WINDOW_SPINE_WIDTH;\n    }\n\n    spineBase\n      .attr('width', spineWidth)\n      .attr('height', SPINE_HEIGHT)\n      .attr('x', startPos)\n      .attr('y', innerHeight / 2)\n      .style('fill', 'white')\n      .style('stroke', 'black');\n  };\n\n  const attachNTerminus = g => {\n    const NTerm = g.append('text');\n    NTerm.attr('dx', SPINE_START_POS - 50)\n      .attr('dy', innerHeight / 2 + 20)\n      .text(() => 'NH2--');\n  };\n\n  const renderVisualization = (id, isWindowView) => {\n    const svg = select(id);\n    svg.style('background-color', 'white');\n\n    const translateX = isWindowView ? initialWidth / 15 : margin.left;\n    const translateY = isWindowView ? initialWidth / 15 : margin.top;\n\n    const g = svg.append('g');\n    g.attr('transform', `translate(${translateX}, ${translateY})`);\n    attachSpine(g, isWindowView);\n    if (showDisulfide) {\n      attachSulfides(g, isWindowView);\n    }\n    if (showGlyco) {\n      attachGlycoBonds(g, isWindowView);\n    }\n    if (!isWindowView) {\n      attachNTerminus(g);\n    }\n  };\n\n  const removeElements = () => {\n    const svgEls = ['text', 'line', 'circle', 'rect'];\n    svgEls.forEach(el => {\n      const allNodes = selectAll(el);\n      allNodes.remove();\n    });\n  };\n\n  useEffect(() => {\n    removeElements();\n    renderVisualization('#svg');\n    renderVisualization('#windowSvg', true);\n    if (scaleFactor !== 1) {\n      document.getElementById('svg').style.marginLeft =\n        (scaleFactor - 1) * window.innerWidth;\n    } else if (fullScale) {\n      document.getElementById('svg').style.marginLeft = 0;\n      // 0.95 * proteinLength + 2 * margin.left;\n    } else {\n      document.getElementById('svg').style.marginLeft = 0;\n    }\n  }, [\n    svgRef.current,\n    showDisulfide,\n    showGlyco,\n    scaleVisualization,\n    scaleFactor,\n    fullScale,\n    windowStart,\n    windowEnd\n  ]);\n\n  const svg = Number.isInteger(currSelection) ? (\n    <svg\n      height={`${height}`}\n      width={`${\n        fullScale\n          ? proteinLength + margin.left * 2\n          : window.innerWidth * scaleFactor\n      }`}\n      ref={svgRef}\n      id=\"svg\"\n      overflow=\"visible\"\n    >\n      <rect />\n    </svg>\n  ) : null;\n\n  const windowSvg = Number.isInteger(currSelection) ? (\n    <div className=\"windowSvg--wrapper\">\n      <svg\n        height={`${height}`}\n        width={`${initialWidth}`}\n        ref={windowSvgRef}\n        id=\"windowSvg\"\n        overflow=\"visible\"\n      >\n        <rect />\n      </svg>\n    </div>\n  ) : null;\n\n  return (\n    <div className=\"svg-wrapper\">\n      {isLegendOpen ? (\n        <Legend\n          glycoslation={glycoslation}\n          disulfideBonds={disulfideBonds}\n          toggleGlyco={setShowGlyco}\n          toggleSulfide={setShowDisulfide}\n          length={proteinLength}\n        />\n      ) : null}\n      {svg}\n      <ProteinWindow\n        length={proteinLength}\n        updateWindowStart={updateWindowStart}\n        updateWindowEnd={updateWindowEnd}\n      />\n      {windowSvg}\n    </div>\n  );\n}\n\nVisualization.propTypes = {\n  isLegendOpen: PropTypes.bool,\n  initialOptions: PropTypes.arrayOf(PropTypes.object).isRequired,\n  height: PropTypes.number,\n  width: PropTypes.number,\n  currSelection: PropTypes.number.isRequired,\n  scaleFactor: PropTypes.number,\n  fullScale: PropTypes.bool,\n  setFullScaleDisabled: PropTypes.func\n};\n\nVisualization.defaultProps = {\n  isLegendOpen: false,\n  setFullScaleDisabled: () => {},\n  scaleFactor: 1,\n  fullScale: false,\n  height: 500,\n  width: 500\n};\n\nexport default Visualization;\n","import React, { useState } from 'react';\nimport {\n  AppBar,\n  MenuItem,\n  Typography,\n  IconButton,\n  Menu,\n  Toolbar,\n  Tooltip\n} from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport LinearScaleIcon from '@material-ui/icons/LinearScale';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AspectRatioIcon from '@material-ui/icons/AspectRatio';\nimport Slider from '@material-ui/core/Slider';\nimport './index.scss';\nimport PropTypes from 'prop-types';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  }\n}));\n\nfunction CustomAppBar(props) {\n  const {\n    toggleLegend,\n    scaleVisualization,\n    setScaleFactor,\n    toggleFullScale,\n    disableFullScale,\n    fullScale\n  } = props;\n  const classes = useStyles();\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = Boolean(anchorEl);\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  const handleMenu = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const valueText = val => {\n    setScaleFactor(val);\n    return `${val}x`;\n  };\n\n  const updateFullScale = () => {\n    toggleFullScale();\n  };\n\n  return (\n    <AppBar>\n      <Toolbar>\n        <Tooltip title=\"Toggle Legend\">\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n            onClick={toggleLegend}\n          >\n            <MenuIcon />\n          </IconButton>\n        </Tooltip>\n        <Tooltip title=\"Turn off Scaling (Proteins must have min 3000 length)\">\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"scale\"\n            onClick={updateFullScale}\n            disabled={disableFullScale}\n          >\n            <AspectRatioIcon />\n          </IconButton>\n        </Tooltip>\n        <Typography variant=\"h6\" className={classes.title}>\n          Sun Lab\n        </Typography>\n        <div>\n          <Tooltip title=\"Increase Scaling Factor\">\n            <IconButton\n              aria-label=\"account of current user\"\n              aria-controls=\"menu-appbar\"\n              aria-haspopup=\"true\"\n              disabled={fullScale}\n              onClick={evt => {\n                handleMenu(evt);\n                scaleVisualization();\n              }}\n              color=\"inherit\"\n            >\n              <LinearScaleIcon />\n            </IconButton>\n          </Tooltip>\n          <Menu\n            id=\"menu-appbar\"\n            anchorEl={anchorEl}\n            anchorOrigin={{\n              vertical: 'top',\n              horizontal: 'right'\n            }}\n            keepMounted\n            transformOrigin={{\n              vertical: 'top',\n              horizontal: 'right'\n            }}\n            open={open}\n            onClose={handleClose}\n            classes={{\n              paper: 'wide-menu'\n            }}\n          >\n            <MenuItem onClick={handleClose}>\n              <Typography id=\"discrete-slider\" gutterBottom>\n                Protein Scaling Factor\n              </Typography>\n            </MenuItem>\n            <MenuItem\n              onClick={handleClose}\n              classes={{ root: 'menuItem--large' }}\n            >\n              <Slider\n                defaultValue={1}\n                getAriaValueText={valueText}\n                aria-labelledby=\"discrete-slider\"\n                valueLabelDisplay=\"auto\"\n                step={1}\n                marks\n                min={1}\n                max={15}\n              />\n            </MenuItem>\n          </Menu>\n        </div>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nCustomAppBar.propTypes = {\n  toggleLegend: PropTypes.bool.isRequired,\n  scaleVisualization: PropTypes.func,\n  setScaleFactor: PropTypes.func,\n  toggleFullScale: PropTypes.func.isRequired,\n  disableFullScale: PropTypes.bool,\n  fullScale: PropTypes.bool\n};\n\nCustomAppBar.defaultProps = {\n  scaleVisualization: () => {},\n  setScaleFactor: () => {},\n  disableFullScale: false,\n  fullScale: false\n};\n\nexport default CustomAppBar;\n","import React from 'react';\nimport {\n  Card,\n  CardActions,\n  CardMedia,\n  CardContent,\n  CardActionArea,\n  Typography\n} from '@material-ui/core';\nimport Logo from '../../static/sunlab.png';\nimport './index.scss';\n\nfunction Introduction(props) {\n  const title = 'Protein Visualizer';\n\n  const redirect = () => {\n    window.location.href = 'http://www.sfu.ca/chemistry/groups/bingyun_sun/';\n  };\n\n  return (\n    <div>\n      <Card className=\"introduction--wrapper\">\n        <CardActionArea>\n          <CardMedia\n            component=\"img\"\n            alt=\"lab logo\"\n            height=\"140\"\n            image={Logo}\n            className=\"introduction--logo\"\n            onClick={redirect}\n          />\n        </CardActionArea>\n        <CardContent className=\"introduction--body\">\n          <Typography variant=\"h5\" className=\"introduction--title\">\n            Read Me\n          </Typography>\n          <Typography variant=\"body1\">\n            This web application was built to visualize protein glycoslyation\n            sites and sulfide bonds to illustrate patterns in their arrangement.\n          </Typography>\n          <ul>\n            <li className=\"introduction--bullet\">\n              <Typography variant=\"body2\" display=\"inline\">\n                Select a protein to visualize from the drop down menu located\n                above this card. There are several example proteins for\n                selection.{' '}\n              </Typography>\n            </li>\n            <li className=\"introduction--bullet\">\n              <Typography variant=\"body2\" display=\"inline\">\n                If the current scale of the visualization is not sufficient to\n                identify patterns , on the top right of the app bar is a sliding\n                scale to horizontally expand the protein.\n              </Typography>\n            </li>\n            <li className=\"introduction--bullet\">\n              <Typography variant=\"body2\" display=\"inline\">\n                In addition to scaling, there is also a window feature that\n                allows users to target a specific region for visualization. This\n                is particularily useful when scaling alone is not sufficient to\n                seperate patterns. The window feature is located below the\n                original visualization.\n              </Typography>\n            </li>\n          </ul>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default Introduction;\n","import { csv } from 'd3';\nimport csvData from './proteins.csv';\n\nasync function getData() {\n  const data = await csv(csvData);\n  return data;\n}\n\nconst arrayStrConversion = str => {\n  const newStr = str.replace(/'/g, '\"');\n  const array = JSON.parse(newStr);\n  return array;\n};\n\nconst getProteins = async () => {\n  const proteinsData = [];\n  const proteins = await getData();\n  console.log('getProteins -> proteins', proteins);\n  proteins.forEach(el => {\n    const protein = {};\n    protein.value = el['Entry name'];\n    protein.label = el['Entry name'];\n    protein.description = el['Protein names'];\n    protein.disulfideBonds = arrayStrConversion(el['Dislfide bond']);\n    protein.glycoslation = arrayStrConversion(el.Glycosylation);\n    protein.length = parseInt(el.Length, 10);\n    protein.nGlycosylation = el['N-Glycosylation']\n      ? arrayStrConversion(el['N-Glycosylation'])\n      : [];\n    protein.oGlycosylation = el['O-Glycosylation']\n      ? arrayStrConversion(el['O-Glycosylation'])\n      : [];\n    proteinsData.push(protein);\n  });\n  console.log('getProteins -> proteinsData', proteinsData);\n  return proteinsData;\n};\n\nexport default { getProteins };\n","import React, { useState, useEffect } from 'react';\nimport { StylesProvider } from '@material-ui/core';\nimport Dropdown from './components/Dropdown';\nimport Visualization from './components/Visualization';\nimport CustomAppBar from './components/AppBar';\nimport Introduction from './components/Introduction';\nimport './App.scss';\nimport parser from './parser';\n\nconst { getProteins } = parser;\n\nconst { innerWidth, innerHeight } = window;\n\nfunction App() {\n  const [currSelection, updateSelection] = useState(null);\n  const [showIntro, setShowIntro] = useState(true);\n  const [scaleVisualization, setScaleVisualization] = useState(false);\n  const [isLegendOpen, setLegendState] = useState(true);\n  const [proteinOpts, setProteinOpts] = useState([]);\n  const [scaleFactor, setScaleFactor] = useState(1);\n  const [fullScale, setFullScale] = useState(false);\n  const [fullScaleDisabled, setFullScaleDisabled] = useState(true);\n\n  useEffect(() => {\n    getProteins().then(proteins => setProteinOpts(proteins));\n  }, []);\n\n  const updateScaleFactor = val => {\n    setScaleFactor(val);\n  };\n\n  const toggleScaling = () => {\n    setScaleVisualization(!scaleVisualization);\n  };\n\n  const updateSel = index => {\n    updateSelection(null);\n    setShowIntro(false);\n    setTimeout(() => updateSelection(index), 500);\n    if (!Number.isInteger(index)) {\n      setShowIntro(true);\n    }\n  };\n\n  const toggleLegend = () => {\n    setLegendState(!isLegendOpen);\n  };\n\n  const toggleFullScale = () => {\n    setFullScale(!fullScale);\n  };\n\n  const intro = showIntro ? <Introduction /> : null;\n\n  return (\n    <StylesProvider injectFirst>\n      <div className=\"App\">\n        <CustomAppBar\n          toggleLegend={toggleLegend}\n          scaleVisualization={toggleScaling}\n          setScaleFactor={updateScaleFactor}\n          toggleFullScale={toggleFullScale}\n          disableFullScale={fullScaleDisabled}\n          fullScale={fullScale}\n        />\n        <div className=\"App-dropdown\">\n          {proteinOpts.length ? (\n            <Dropdown options={proteinOpts} updateSel={updateSel} />\n          ) : null}\n        </div>\n        {currSelection != null && Number.isInteger(currSelection) ? (\n          <Visualization\n            width={innerWidth}\n            height={innerHeight}\n            currSelection={currSelection}\n            isLegendOpen={isLegendOpen}\n            initialOptions={proteinOpts}\n            scaleFactor={scaleFactor}\n            fullScale={fullScale}\n            setFullScaleDisabled={setFullScaleDisabled}\n          />\n        ) : (\n          <div>{intro}</div>\n        )}\n      </div>\n    </StylesProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable no-undef */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/sunlab.730a03c0.png\";","module.exports = __webpack_public_path__ + \"static/media/proteins.07fd94e1.csv\";"],"sourceRoot":""}