{"version":3,"sources":["components/D3Examples/data.csv","components/Dropdown/index.js","static/constants.js","components/D3Examples/BarChart.js","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Dropdown","props","options","inputLabel","useRef","useState","val","setValue","menuList","opts","menuItems","push","MenuItem","value","key","forEach","opt","label","mItem","generateMenuItems","FormControl","variant","className","InputLabel","ref","id","Select","labelId","onChange","event","newVal","target","autoWidth","description","disulfideBonds","glycoslation","length","BarChart","svgRef","height","width","setBarData","useEffect","a","async","csv","csvData","data","getData","then","d","population","xValue","yValue","country","margin","innerWidth","innerHeight","xScale","scaleLinear","domain","max","range","yScale","scaleBand","map","padding","g","select","append","attr","call","axisLeft","axisBottom","selectAll","enter","bandwidth","render","style","current","defaultProps","initialOptions","constants","App","StylesProvider","injectFirst","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3b3fe3dd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/data.fde3edba.csv\";","import React, { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport './index.scss';\n\n/*\n * Drop down menu to select protein to visualize.\n */\nconst Dropdown = props => {\n  const { options } = props;\n  const inputLabel = useRef(null);\n  const [val, setValue] = useState('');\n\n  const handleChange = event => {\n    const {\n      target: { value: newVal }\n    } = event;\n    setValue(newVal);\n  };\n\n  const generateMenuItems = opts => {\n    const menuItems = [];\n    menuItems.push(\n      <MenuItem value=\" \" key=\"default\">\n        None\n      </MenuItem>\n    );\n\n    opts.forEach(opt => {\n      const { value, label } = opt;\n      const mItem = (\n        <MenuItem value={value} key={`key${value}`}>\n          {label}\n        </MenuItem>\n      );\n      menuItems.push(mItem);\n    });\n    return menuItems;\n  };\n\n  const menuList = generateMenuItems(options);\n\n  return (\n    <FormControl variant=\"outlined\" className=\"drop-down\">\n      <InputLabel ref={inputLabel} id=\"demo-simple-select-outlined-label\">\n        Protein Name\n      </InputLabel>\n      <Select\n        labelId=\"demo-simple-select-outlined-label\"\n        id=\"demo-simple-select-outlined\"\n        value={val}\n        onChange={handleChange}\n        autoWidth\n      >\n        {menuList}\n      </Select>\n    </FormControl>\n  );\n};\n\nDropdown.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.object).isRequired\n};\n\nexport default Dropdown;\n","const initialOptions = [\n  {\n    value: 'HLAA_HUMAN',\n    label: 'HLAA_HUMAN',\n    description:\n      'HLA class I histocompatibility antigen, A alpha chain (Human leukocyte antigen A) (HLA-A)',\n    disulfideBonds: ['125 188', '227 283'],\n    glycoslation: ['110'],\n    length: 365\n  },\n  {\n    value: 'ELNE_HUMAN',\n    label: 'ELNE_HUMAN',\n    description:\n      'Neutrophil elastase (EC 3.4.21.37) (Bone marrow serine protease) (Elastase-2) (Human leukocyte elastase) (HLE) (Medullasin) (PMN elastase)',\n    disulfideBonds: ['55 71', '151 208', '181 187', '198 223'],\n    glycoslation: ['88', '124', '173'],\n    length: 267\n  },\n  {\n    value: 'GRAB_HUMAN',\n    label: 'GRAB_HUMAN',\n    description:\n      'Granzyme B (EC 3.4.21.79) (C11) (CTLA-1) (Cathepsin G-like 1) (CTSGL1) (Cytotoxic T-lymphocyte proteinase 2) (Lymphocyte protease) (Fragmentin-2) (Granzyme-2) (Human lymphocyte protein) (HLP) (SECT) (T-cell serine protease 1-3E)',\n    disulfideBonds: ['49 65', '142 209', '173 188'],\n    glycoslation: ['71', '104'],\n    length: 247\n  }\n];\n\nexport default { initialOptions };\n","import React, { useRef, useEffect, useState } from 'react';\nimport {\n  select,\n  csv,\n  scaleLinear,\n  max,\n  scaleBand,\n  axisLeft,\n  axisBottom\n} from 'd3';\nimport PropTypes from 'prop-types';\nimport csvData from './data.csv';\nimport './BarChart.scss';\n\nfunction BarChart(props) {\n  const svgRef = useRef(null);\n  const { height, width } = props;\n  const [barData, setBarData] = useState(null);\n\n  const render = data => {\n    const xValue = d => d.population;\n    const yValue = d => d.country;\n\n    const margin = { top: 20, right: 20, bottom: 20, left: 100 };\n    const innerWidth = width - margin.left - margin.right;\n    const innerHeight = height - margin.top - margin.bottom;\n    // maps a domain to a range\n    const xScale = scaleLinear()\n      .domain([0, max(data, xValue)])\n      .range([0, innerWidth]);\n\n    const yScale = scaleBand()\n      .domain(data.map(yValue))\n      .range([0, innerHeight])\n      .padding(0.1);\n\n    const svg = select('#svg');\n    const g = svg.append('g');\n    g.attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n    // create Axis\n    g.append('g').call(axisLeft(yScale));\n    g.append('g')\n      .call(axisBottom(xScale))\n      .attr('transform', `translate(0, ${innerHeight})`);\n    // move x axis down\n    // join empty rect svg AND csv data, then enter elements to create data rect svgs\n    g.selectAll('rect')\n      .data(data)\n      .enter()\n      .append('rect')\n      .attr('y', d => yScale(yValue(d)))\n      .attr('width', d => xScale(xValue(d)))\n      .attr('height', yScale.bandwidth());\n  };\n\n  useEffect(() => {\n    async function getData() {\n      const data = await csv(csvData);\n      return data;\n    }\n    getData().then(data => {\n      data.forEach(d => {\n        // eslint-disable-next-line no-param-reassign\n        d.population = +d.population * 1000;\n      });\n      setBarData(data);\n      render(data);\n    });\n  }, []);\n\n  useEffect(() => {\n    const svg = select('#svg');\n    svg.style('background-color', 'white');\n  }, [svgRef.current]);\n  return (\n    <div>\n      <svg height={`${height}`} width={`${width}`} ref={svgRef} id=\"svg\">\n        <rect />\n      </svg>\n    </div>\n  );\n}\n\nBarChart.propTypes = {\n  height: PropTypes.number,\n  width: PropTypes.number\n};\n\nBarChart.defaultProps = {\n  height: 500,\n  width: 500\n};\n\nexport default BarChart;\n","import React from 'react';\nimport { StylesProvider } from '@material-ui/core';\nimport Dropdown from './components/Dropdown';\nimport constants from './static/constants';\nimport BarChart from './components/D3Examples/BarChart';\nimport './App.scss';\n\nconst { initialOptions } = constants;\n\nfunction App() {\n  return (\n    <StylesProvider injectFirst>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Disulfide bond and Glycoslyation Visualization\n        </header>\n        <div className=\"App-dropdown\">\n          <Dropdown options={initialOptions} />\n        </div>\n        <div className=\"App-canvas\">Visualization</div>\n        <BarChart width={600} height={500} />\n      </div>\n    </StylesProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable no-undef */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}