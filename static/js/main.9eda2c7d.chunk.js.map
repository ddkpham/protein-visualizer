{"version":3,"sources":["components/Dropdown/index.js","static/constants.js","components/Legend/index.js","components/Visualization/ProteinWindow/index.js","components/Visualization/index.js","components/AppBar/index.js","parser/index.js","App.jsx","serviceWorker.js","index.js","parser/proteins.csv"],"names":["Dropdown","props","options","updateSel","inputLabel","useRef","useState","val","setValue","menuList","opts","menuItems","push","MenuItem","value","key","forEach","opt","idx","label","mItem","generateMenuItems","FormControl","variant","className","InputLabel","ref","id","Select","labelId","onChange","event","newVal","target","autoWidth","useStyles","makeStyles","root","Width","bullet","display","margin","transform","title","fontSize","textDecoration","pos","marginBottom","Legend","glycoslation","disulfideBonds","toggleGlyco","toggleSulfide","length","showGlyco","setShowGlyco","showSulfide","setShowSulfide","classes","handleToggle","bond","Card","CardContent","Typography","color","gutterBottom","IconButton","aria-label","onClick","defaultProps","ProteinWindow","updateWindowStart","updateWindowEnd","TextField","defaultValue","ev","console","log","COLOR_PALLETE","constants","scaleMap","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","Visualization","height","initialWidth","width","currSelection","isLegendOpen","initialOptions","scaleFactor","fullScale","setFullScaleDisabled","proteinLength","svgRef","windowSvgRef","start","end","windowPos","setWindowPos","windowStart","windowEnd","showDisulfide","setShowDisulfide","scaleVisualization","SCALE_FACTOR","top","right","bottom","left","innerWidth","innerHeight","SULFIDE_POS","SPINE_HEIGHT","SPINE_START_POS","WINDOW_SPINE_START_POS","SPINE_WIDTH","WINDOW_SPINE_WIDTH","glycoBonds","map","pair","bondPos","split","el","atom","parseInt","pairRanking","array","total","low","high","i","currLow","currHigh","calculateBondRanking","xScale","scaleLinear","domain","range","windowScale","bondHeight","renderVisualization","isWindowView","svg","select","style","translateX","translateY","g","append","attr","spineBase","spineWidth","attachSpine","bonds","scale","filter","x","y","text","attachSulfides","gBonds","CIRCLE_RADIUS","GLYCO_LINK_LENGTH","attachGlycoBonds","attachNTerminus","useEffect","selectAll","remove","document","getElementById","marginLeft","current","Number","isInteger","overflow","windowSvg","newStart","newEnd","theme","flexGrow","menuButton","marginRight","spacing","CustomAppBar","toggleLegend","setScaleFactor","toggleFullScale","disableFullScale","anchorEl","setAnchorEl","open","Boolean","handleClose","AppBar","Toolbar","Tooltip","edge","disabled","aria-controls","aria-haspopup","evt","currentTarget","Menu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","paper","Slider","getAriaValueText","aria-labelledby","valueLabelDisplay","step","marks","min","max","getData","a","async","csv","csvData","data","arrayStrConversion","str","newStr","replace","JSON","parse","getProteins","proteinsData","protein","description","Glycosylation","Length","window","App","updateSelection","setScaleVisualization","setLegendState","proteinOpts","setProteinOpts","setFullScale","fullScaleDisabled","then","proteins","StylesProvider","injectFirst","index","setTimeout","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.9eda2c7d.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport './index.scss';\n\n/*\n * Drop down menu to select protein to visualize.\n */\nconst Dropdown = props => {\n  const { options, updateSel } = props;\n  const inputLabel = useRef(null);\n  const [val, setValue] = useState('');\n\n  const handleChange = event => {\n    const {\n      target: { value: newVal }\n    } = event;\n    setValue(newVal);\n    updateSel(newVal);\n  };\n\n  const generateMenuItems = opts => {\n    const menuItems = [];\n    menuItems.push(\n      <MenuItem value=\" \" key=\"default\">\n        None\n      </MenuItem>\n    );\n\n    opts.forEach((opt, idx) => {\n      const { value, label } = opt;\n      const mItem = (\n        <MenuItem value={idx} key={`key${value}`}>\n          {label}\n        </MenuItem>\n      );\n      menuItems.push(mItem);\n    });\n    return menuItems;\n  };\n\n  const menuList = generateMenuItems(options);\n\n  return (\n    <FormControl variant=\"outlined\" className=\"drop-down\">\n      <InputLabel ref={inputLabel} id=\"demo-simple-select-outlined-label\">\n        Protein Name\n      </InputLabel>\n      <Select\n        labelId=\"demo-simple-select-outlined-label\"\n        id=\"demo-simple-select-outlined\"\n        value={val}\n        onChange={handleChange}\n        autoWidth\n      >\n        {menuList}\n      </Select>\n    </FormControl>\n  );\n};\n\nDropdown.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.object).isRequired,\n  updateSel: PropTypes.func.isRequired\n};\n\nexport default Dropdown;\n","const initialOptions = [\n  {\n    value: 'HLAA_HUMAN',\n    label: 'HLAA_HUMAN',\n    description:\n      'HLA class I histocompatibility antigen, A alpha chain (Human leukocyte antigen A) (HLA-A)',\n    disulfideBonds: ['125 188', '227 283'],\n    glycoslation: ['110'],\n    length: 365\n  },\n  {\n    value: 'ELNE_HUMAN',\n    label: 'ELNE_HUMAN',\n    description:\n      'Neutrophil elastase (EC 3.4.21.37) (Bone marrow serine protease) (Elastase-2) (Human leukocyte elastase) (HLE) (Medullasin) (PMN elastase)',\n    disulfideBonds: ['55 71', '151 208', '181 187', '198 223'],\n    glycoslation: ['88', '124', '173'],\n    length: 267\n  },\n  {\n    value: 'GRAB_HUMAN',\n    label: 'GRAB_HUMAN',\n    description:\n      'Granzyme B (EC 3.4.21.79) (C11) (CTLA-1) (Cathepsin G-like 1) (CTSGL1) (Cytotoxic T-lymphocyte proteinase 2) (Lymphocyte protease) (Fragmentin-2) (Granzyme-2) (Human lymphocyte protein) (HLP) (SECT) (T-cell serine protease 1-3E)',\n    disulfideBonds: ['49 65', '142 209', '173 188'],\n    glycoslation: ['71', '104'],\n    length: 247\n  }\n];\n\nconst COLOR_PALLETE = [\n  '#c76861',\n  '#e6c11e',\n  '#90de1b',\n  '#1bde97',\n  '#1bc7de',\n  '#1b66de',\n  '#421bde',\n  '#901bde',\n  '#d618d3',\n  '#d6186a'\n];\n\nexport default { initialOptions, COLOR_PALLETE };\n","import React, { useState } from 'react';\nimport { Card, CardContent, Typography, IconButton } from '@material-ui/core';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport PropTypes from 'prop-types';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport './index.scss';\n\nconst useStyles = makeStyles({\n  root: {\n    Width: 275\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)'\n  },\n  title: {\n    fontSize: 18,\n    textDecoration: 'underline'\n  },\n  pos: {\n    marginBottom: 12\n  }\n});\n/**\n *\n * @param {Object} props\n * @property {Object} glycoslation object containing glyco bond info\n * @property {Object} disulfideBonds object containing sulfide bond info\n * @property {func} toggleGlyco Function that toggles glyco bond visibility\n * @property {func} toggleSulfide Function that toggles sulfide bond visibility\n * @property {integar} length total length of protein structure\n */\nfunction Legend(props) {\n  const {\n    glycoslation,\n    disulfideBonds,\n    toggleGlyco,\n    toggleSulfide,\n    length\n  } = props;\n  const [showGlyco, setShowGlyco] = useState(true);\n  const [showSulfide, setShowSulfide] = useState(true);\n  const classes = useStyles();\n\n  const handleToggle = bond => {\n    if (bond === 'sulfide') {\n      toggleSulfide(!showSulfide);\n      setShowSulfide(!showSulfide);\n    } else {\n      toggleGlyco(!showGlyco);\n      setShowGlyco(!showGlyco);\n    }\n  };\n\n  return (\n    <Card variant=\"outlined\" classes={{ root: 'legend--wrapper' }}>\n      <CardContent>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          Legend\n        </Typography>\n        <div className=\"legend--menuItem\">\n          <Typography>\n            Total Glyco Bonds:\n            <Typography display=\"inline\" classes={{ root: 'bold-text' }}>\n              {glycoslation.length}\n            </Typography>\n          </Typography>\n          <div className={`button-visibility${showGlyco ? '--on' : '--off'}`}>\n            <IconButton\n              aria-label=\"delete\"\n              className={{ root: 'on' }}\n              onClick={() => handleToggle('glyco')}\n            >\n              <VisibilityIcon />\n            </IconButton>\n          </div>\n        </div>\n        <div className=\"legend--menuItem\">\n          <Typography>\n            Total Sulfide Bonds:\n            <Typography display=\"inline\" classes={{ root: 'bold-text' }}>\n              {disulfideBonds.length}\n            </Typography>\n          </Typography>\n          <div className={`button-visibility${showSulfide ? '--on' : '--off'}`}>\n            <IconButton\n              aria-label=\"delete\"\n              onClick={() => handleToggle('sulfide')}\n            >\n              <VisibilityIcon />\n            </IconButton>\n          </div>\n        </div>\n        <div className=\"legend--menuItem\">\n          <Typography>\n            Total Protein Length:\n            <Typography display=\"inline\" classes={{ root: 'bold-text' }}>\n              {length}\n            </Typography>\n          </Typography>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nLegend.propTypes = {\n  glycoslation: PropTypes.arrayOf(PropTypes.string).isRequired,\n  disulfideBonds: PropTypes.arrayOf(PropTypes.string).isRequired,\n  toggleGlyco: PropTypes.func,\n  toggleSulfide: PropTypes.func,\n  length: PropTypes.number.isRequired\n};\n\nLegend.defaultProps = {\n  toggleGlyco: () => {},\n  toggleSulfide: () => {}\n};\n\nexport default Legend;\n","import React, { useState } from 'react';\nimport {\n  Card,\n  CardContent,\n  IconButton,\n  Typography,\n  TextField\n} from '@material-ui/core';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport PropTypes from 'prop-types';\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport './index.scss';\n\nconst useStyles = makeStyles({\n  root: {\n    Width: 275\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)'\n  },\n  title: {\n    fontSize: 18,\n    textDecoration: 'underline'\n  },\n  pos: {\n    marginBottom: 12\n  }\n});\n\nfunction ProteinWindow(props) {\n  const {\n    toggleGlyco,\n    toggleSulfide,\n    length,\n    updateWindowStart,\n    updateWindowEnd\n  } = props;\n  const [showGlyco, setShowGlyco] = useState(true);\n  const [showSulfide, setShowSulfide] = useState(true);\n  const classes = useStyles();\n\n  const [start, setStart] = useState(0);\n  const [end, setEnd] = useState(length);\n\n  const handleToggle = bond => {\n    if (bond === 'sulfide') {\n      toggleSulfide(!showSulfide);\n      setShowSulfide(!showSulfide);\n    } else {\n      toggleGlyco(!showGlyco);\n      setShowGlyco(!showGlyco);\n    }\n  };\n\n  return (\n    <div className=\"window--wrapper\">\n      <Card variant=\"outlined\" classes={{ root: 'window--display' }}>\n        <CardContent>\n          <Typography\n            className={classes.title}\n            color=\"textSecondary\"\n            gutterBottom\n          >\n            Protein Window Input\n          </Typography>\n\n          <div className=\"window--menuItem\">\n            <Typography>\n              Total Protein Length:\n              <Typography display=\"inline\" classes={{ root: 'bold-text' }}>\n                {length}\n              </Typography>\n            </Typography>\n          </div>\n          <div className=\"window--menuItem\">\n            <TextField\n              id=\"outlined-basic\"\n              defaultValue={0}\n              label=\"Start\"\n              variant=\"outlined\"\n              onChange={ev => updateWindowStart(ev.target.value)}\n            />\n            <TextField\n              id=\"outlined-basic\"\n              defaultValue={length}\n              label=\"End\"\n              variant=\"outlined\"\n              onChange={ev => updateWindowEnd(ev.target.value)}\n            />\n            <div className=\"button-visibility--on\">\n              <IconButton onClick={() => console.log('clicked')}>\n                <ZoomInIcon />\n              </IconButton>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nProteinWindow.propTypes = {\n  toggleGlyco: PropTypes.func,\n  toggleSulfide: PropTypes.func,\n  length: PropTypes.number.isRequired\n};\n\nProteinWindow.defaultProps = {\n  toggleGlyco: () => {},\n  toggleSulfide: () => {}\n};\n\nexport default ProteinWindow;\n","import React, { useRef, useEffect, useState } from 'react';\nimport { select, scaleLinear, selectAll } from 'd3';\nimport PropTypes from 'prop-types';\nimport constants from '../../static/constants';\nimport Legend from '../Legend';\nimport ProteinWindow from './ProteinWindow';\n\nimport './index.scss';\n\nconst CIRCLE_RADIUS = 5;\nconst SPINE_HEIGHT = 30;\n\nconst { COLOR_PALLETE } = constants;\n\nconst scaleMap = {\n  1: 1,\n  2: 2.5,\n  3: 2,\n  4: 1.9,\n  5: 2,\n  6: 2.2,\n  7: 2.5,\n  8: 2.9,\n  9: 3.6,\n  10: 4.6,\n  11: 6.8,\n  12: 12,\n  13: 59,\n  14: -15,\n  15: -7\n};\n\nconst calculateBondRanking = array => {\n  const pairRanking = [];\n  array.forEach((pair, idx) => {\n    let total = 1;\n    const [low, high] = pair;\n    for (let i = 0; i < array.length; i += 1) {\n      if (idx !== i) {\n        const [currLow, currHigh] = array[i];\n        if (low < currLow && high > currHigh) {\n          total += 1;\n        }\n        if (low < currLow && high > currLow && high < currHigh) {\n          total += 0.7;\n        }\n        if (low > currLow && low < currHigh && high > currHigh) {\n          total += 0.75;\n        }\n      }\n    }\n    pairRanking.push(total);\n  });\n  return pairRanking;\n};\n\nfunction Visualization(props) {\n  const {\n    height,\n    width: initialWidth,\n    currSelection,\n    isLegendOpen,\n    initialOptions,\n    scaleFactor,\n    fullScale,\n    setFullScaleDisabled\n  } = props;\n\n  const {\n    disulfideBonds,\n    glycoslation,\n    length: proteinLength\n  } = initialOptions[currSelection];\n\n  const svgRef = useRef(null);\n  const windowSvgRef = useRef(null);\n  const [windowPos, setWindowPos] = useState({ start: 0, end: proteinLength });\n  const { start: windowStart, end: windowEnd } = windowPos;\n  const [windowView, setWindowView] = useState(false);\n  const [showGlyco, setShowGlyco] = useState(true);\n  const [showDisulfide, setShowDisulfide] = useState(true);\n\n  const scaleVisualization = scaleFactor !== 1;\n  const SCALE_FACTOR = scaleVisualization ? scaleFactor : 1;\n  const width = initialWidth * SCALE_FACTOR;\n\n  const margin = {\n    top: height / 15,\n    right: width / 15,\n    bottom: height / 15,\n    left: width / 15\n  };\n  const innerWidth = width - margin.left - margin.right;\n  const innerHeight = height - margin.top - margin.bottom;\n  const SULFIDE_POS = innerHeight / 2 + SPINE_HEIGHT / 2;\n  const SULFIDE_BOND_LENGTH = 40;\n  const SULFIDE_ATOM_OFFSET = 20;\n  const GLYCO_STEM_LENGTH = 60;\n  const GLYCO_LINK_LENGTH = 10;\n  const SPINE_START_POS = (SCALE_FACTOR * 0.5 * width) / 15;\n  const WINDOW_SPINE_START_POS = (0.5 * initialWidth) / 15;\n\n  const SPINE_WIDTH = scaleVisualization\n    ? innerWidth + SPINE_START_POS\n    : innerWidth + SPINE_START_POS;\n\n  const WINDOW_SPINE_WIDTH = initialWidth - (2 * initialWidth) / 15;\n\n  const glycoBonds = initialOptions[currSelection].disulfideBonds.map(pair => {\n    const bondPos = [];\n    const atoms = pair.split(' ');\n    atoms.forEach(el => {\n      const atom = parseInt(el, 10);\n      bondPos.push(atom);\n    });\n    return bondPos;\n  });\n\n  const updateWindowStart = newStart => {\n    setWindowPos({ ...windowPos, start: newStart });\n  };\n\n  const updateWindowEnd = newEnd => {\n    setWindowPos({ ...windowPos, end: newEnd });\n  };\n\n  if (proteinLength < 3000) {\n    setFullScaleDisabled(true);\n  } else {\n    setFullScaleDisabled(false);\n  }\n  const pairRanking = calculateBondRanking(glycoBonds);\n\n  const xScale = scaleLinear()\n    .domain([0, proteinLength])\n    .range([\n      fullScale ? 0 : SPINE_START_POS,\n      fullScale ? proteinLength : SPINE_WIDTH\n    ]);\n\n  const windowScale = scaleLinear()\n    .domain([windowStart, windowEnd])\n    .range([\n      fullScale ? 0 : WINDOW_SPINE_START_POS,\n      fullScale ? proteinLength : WINDOW_SPINE_WIDTH\n    ]);\n\n  const toggleWindowView = () => {\n    setWindowView(!windowView);\n  };\n\n  const bondHeight = idx => {\n    const bHeight = SULFIDE_POS + SULFIDE_BOND_LENGTH * pairRanking[idx];\n    return bHeight;\n  };\n\n  const attachGlycoBonds = (g, isWindowView) => {\n    let gBonds = glycoslation.map(el => parseInt(el, 10));\n    if (isWindowView) {\n      gBonds = gBonds.filter(bond => bond >= windowStart && windowEnd);\n    }\n    const scale = isWindowView ? windowScale : xScale;\n    gBonds.forEach(el => {\n      const atom = g.append('text');\n\n      atom\n        .attr('dx', scale(el) - 5)\n        .attr('dy', SULFIDE_POS + 5)\n        .text(() => `N`)\n        .attr('class', 'glyco-labels');\n\n      const pos = g.append('text');\n      pos\n        .attr('dx', scale(el) + 3)\n        .attr('dy', SULFIDE_POS + 7)\n        .text(() => `${el}`)\n        .attr('class', 'glyco-labels--pos');\n\n      const stem = g.append('line');\n      stem\n        .attr('x1', scale(el))\n        .attr('y1', SULFIDE_POS - 10)\n        .attr('x2', scale(el))\n        .attr('y2', SULFIDE_POS - GLYCO_STEM_LENGTH)\n        .style('stroke', 'black');\n\n      const mol1 = g.append('circle');\n      mol1\n        .attr('cx', scale(el))\n        .attr('cy', SULFIDE_POS - GLYCO_STEM_LENGTH)\n        .attr('r', CIRCLE_RADIUS + 3)\n        .style('stroke', 'black')\n        .style('fill', 'black');\n\n      const link = g.append('line');\n      link\n        .attr('x1', scale(el))\n        .attr('y1', SULFIDE_POS - GLYCO_STEM_LENGTH)\n        .attr('x2', scale(el))\n        .attr('y2', SULFIDE_POS - GLYCO_STEM_LENGTH - GLYCO_LINK_LENGTH * 2)\n        .style('stroke', 'black');\n\n      const link2 = g.append('line');\n      link2\n        .attr('x1', scale(el))\n        .attr('y1', SULFIDE_POS - GLYCO_STEM_LENGTH - GLYCO_LINK_LENGTH * 2)\n        .attr('x2', scale(el))\n        .attr('y2', SULFIDE_POS - GLYCO_STEM_LENGTH - GLYCO_LINK_LENGTH * 3.5)\n        .style('stroke', 'black');\n      const link3 = g.append('line');\n      link3\n        .attr('x1', scale(el))\n        .attr('y1', SULFIDE_POS - GLYCO_STEM_LENGTH - GLYCO_LINK_LENGTH * 3.5)\n        .attr('x2', scale(el))\n        .attr('y2', SULFIDE_POS - GLYCO_STEM_LENGTH - GLYCO_LINK_LENGTH * 4.5)\n        .style('stroke', 'black');\n\n      const mol2 = g.append('circle');\n      mol2\n        .attr('cx', scale(el))\n        .attr('cy', SULFIDE_POS - GLYCO_STEM_LENGTH - GLYCO_LINK_LENGTH * 2)\n        .attr('r', CIRCLE_RADIUS + 3)\n        .style('stroke', 'black')\n        .style('fill', 'grey');\n\n      const mol3 = g.append('rect');\n      mol3\n        .attr('width', 14)\n        .attr('height', 14)\n        .attr('x', scale(el) - 7)\n        .attr('y', SULFIDE_POS - GLYCO_STEM_LENGTH - GLYCO_LINK_LENGTH * 5)\n        .style('fill', 'white')\n        .style('stroke', 'black');\n    });\n  };\n\n  const attachSulfides = (g, isWindowView) => {\n    let bonds = disulfideBonds.map(pair => {\n      const bondPos = [];\n      const atoms = pair.split(' ');\n      atoms.forEach(el => {\n        const atom = parseInt(el, 10);\n        bondPos.push(atom);\n      });\n      return bondPos;\n    });\n\n    const scale = isWindowView ? windowScale : xScale;\n    if (isWindowView) {\n      bonds = bonds.filter(bond => {\n        const [x, y] = bond;\n        return x >= windowStart && y <= windowEnd;\n      });\n    }\n\n    bonds.forEach((pair, idx) => {\n      const [x, y] = pair;\n      pair.forEach(el => {\n        const atom = g.append('circle');\n        atom\n          .attr('cx', scale(el))\n          .attr('cy', SULFIDE_POS)\n          .attr('r', CIRCLE_RADIUS)\n          .style('stroke', 'black')\n          .style('fill', COLOR_PALLETE[idx % COLOR_PALLETE.length]);\n\n        const bond = g.append('line');\n        bond\n          .attr('x1', scale(el))\n          .attr('y1', SULFIDE_POS + 20)\n          .attr('x2', scale(el))\n          .attr('y2', bondHeight(idx))\n          .style('stroke', 'black');\n        const sulfide = g.append('text');\n        sulfide\n          .attr('dx', scale(el) - 5)\n          .attr('dy', bondHeight(idx) + SULFIDE_ATOM_OFFSET)\n          .text(() => 'S');\n\n        const pos = g.append('text');\n        pos\n          .attr('dx', scale(el) + 4)\n          .attr('dy', bondHeight(idx) + SULFIDE_ATOM_OFFSET + 5)\n          .text(() => `${el}`)\n          .attr('class', 'sulfide-labels--pos');\n      });\n      const link = g.append('line');\n      link\n        .attr('x1', scale(x))\n        .attr('y1', bondHeight(idx))\n        .attr('x2', scale(y))\n        .attr('y2', bondHeight(idx))\n        .style('stroke', 'black');\n    });\n  };\n\n  const attachSpine = (g, isWindowView) => {\n    const spineBase = g.append('rect');\n    let spineWidth = fullScale ? proteinLength : innerWidth;\n    if (isWindowView) {\n      spineWidth = WINDOW_SPINE_WIDTH;\n      console.log('attachSpine -> innerWidth', innerWidth);\n      console.log('attachSpine -> spineWidth', spineWidth);\n      console.log('spine start pos', SPINE_START_POS);\n      console.log(\n        'attachSpine -> WINDOW_SPINE_START_POS',\n        WINDOW_SPINE_START_POS\n      );\n    }\n    spineBase\n      .attr('width', spineWidth)\n      .attr('height', SPINE_HEIGHT)\n      .attr('x', isWindowView ? WINDOW_SPINE_START_POS : SPINE_START_POS)\n      .attr('y', innerHeight / 2)\n      .style('fill', 'white')\n      .style('stroke', 'black');\n  };\n\n  const attachNTerminus = g => {\n    const NTerm = g.append('text');\n    NTerm.attr('dx', SPINE_START_POS - 50)\n      .attr('dy', innerHeight / 2 + 20)\n      .text(() => 'NH2--');\n  };\n\n  const renderVisualization = (id, isWindowView) => {\n    const svg = select(id);\n    svg.style('background-color', 'white');\n\n    const translateX = isWindowView ? initialWidth / 15 : margin.left;\n    const translateY = isWindowView ? initialWidth / 15 : margin.top;\n\n    const g = svg.append('g');\n    g.attr('transform', `translate(${translateX}, ${translateY})`);\n    attachSpine(g, isWindowView);\n    if (showDisulfide) {\n      attachSulfides(g, isWindowView);\n    }\n    if (showGlyco) {\n      attachGlycoBonds(g, isWindowView);\n    }\n    if (!isWindowView) {\n      attachNTerminus(g);\n    }\n  };\n\n  const removeElements = () => {\n    const svgEls = ['text', 'line', 'circle', 'rect'];\n    svgEls.forEach(el => {\n      const allNodes = selectAll(el);\n      allNodes.remove();\n    });\n  };\n\n  useEffect(() => {\n    removeElements();\n    renderVisualization('#svg');\n    renderVisualization('#windowSvg', true);\n    if (scaleFactor !== 1) {\n      document.getElementById('svg').style.marginLeft =\n        innerWidth / scaleMap[scaleFactor];\n      // document.getElementById('windowSvg').style.marginLeft =\n      //   -WINDOW_SPINE_WIDTH / scaleMap[scaleFactor];\n    } else if (fullScale) {\n      document.getElementById('svg').style.marginLeft =\n        0.95 * proteinLength + 2 * margin.left;\n    } else {\n      document.getElementById('svg').style.marginLeft = 0;\n    }\n  }, [\n    svgRef.current,\n    showDisulfide,\n    showGlyco,\n    scaleVisualization,\n    scaleFactor,\n    fullScale,\n    windowStart,\n    windowEnd\n  ]);\n\n  // useEffect(() => {\n  //   removeElements();\n  //   renderVisualization('#svg');\n  //   renderVisualization('#windowSvg', true);\n  //   if (scaleFactor !== 1) {\n  //     document.getElementById('svg').style.marginLeft =\n  //       innerWidth / scaleMap[scaleFactor];\n  //   } else if (fullScale) {\n  //     document.getElementById('svg').style.marginLeft =\n  //       0.95 * proteinLength + 2 * margin.left;\n  //   } else {\n  //     document.getElementById('svg').style.marginLeft = 0;\n  //   }\n  // }, [\n  //   windowSvgRef.current,\n  //   windowStart,\n  //   windowEnd,\n  //   scaleVisualization,\n  //   scaleFactor,\n  //   fullScale\n  // ]);\n\n  const svg = Number.isInteger(currSelection) ? (\n    <svg\n      height={`${height}`}\n      width={`${\n        fullScale ? proteinLength + margin.left * 2 : width + margin.left\n      }`}\n      ref={svgRef}\n      id=\"svg\"\n      overflow=\"visible\"\n    >\n      <rect />\n    </svg>\n  ) : null;\n\n  const windowSvg = Number.isInteger(currSelection) ? (\n    <div className=\"windowSvg--wrapper\">\n      <svg\n        height={`${height}`}\n        width={`${initialWidth}`}\n        ref={windowSvgRef}\n        id=\"windowSvg\"\n        overflow=\"visible\"\n      >\n        <rect />\n      </svg>\n    </div>\n  ) : null;\n\n  return (\n    <div className=\"svg-wrapper\">\n      {isLegendOpen ? (\n        <Legend\n          glycoslation={glycoslation}\n          disulfideBonds={disulfideBonds}\n          toggleGlyco={setShowGlyco}\n          toggleSulfide={setShowDisulfide}\n          length={proteinLength}\n        />\n      ) : null}\n      {svg}\n      <ProteinWindow\n        length={proteinLength}\n        updateWindowStart={updateWindowStart}\n        updateWindowEnd={updateWindowEnd}\n      />\n      {windowSvg}\n    </div>\n  );\n}\n\nVisualization.propTypes = {\n  isLegendOpen: PropTypes.bool,\n  initialOptions: PropTypes.arrayOf(PropTypes.object).isRequired,\n  height: PropTypes.number,\n  width: PropTypes.number,\n  currSelection: PropTypes.number.isRequired,\n  scaleFactor: PropTypes.number,\n  fullScale: PropTypes.bool,\n  setFullScaleDisabled: PropTypes.func\n};\n\nVisualization.defaultProps = {\n  isLegendOpen: false,\n  setFullScaleDisabled: () => {},\n  scaleFactor: 1,\n  fullScale: false,\n  height: 500,\n  width: 500\n};\n\nexport default Visualization;\n","import React, { useState } from 'react';\nimport {\n  AppBar,\n  MenuItem,\n  Typography,\n  IconButton,\n  Menu,\n  Toolbar,\n  Tooltip\n} from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport LinearScaleIcon from '@material-ui/icons/LinearScale';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AspectRatioIcon from '@material-ui/icons/AspectRatio';\nimport Slider from '@material-ui/core/Slider';\nimport './index.scss';\nimport PropTypes from 'prop-types';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  }\n}));\n\nfunction CustomAppBar(props) {\n  const {\n    toggleLegend,\n    scaleVisualization,\n    setScaleFactor,\n    toggleFullScale,\n    disableFullScale,\n    fullScale\n  } = props;\n  const classes = useStyles();\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = Boolean(anchorEl);\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  const handleMenu = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const valueText = val => {\n    setScaleFactor(val);\n    return `${val}x`;\n  };\n\n  const updateFullScale = () => {\n    toggleFullScale();\n  };\n\n  return (\n    <AppBar>\n      <Toolbar>\n        <Tooltip title=\"Toggle Legend\">\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n            onClick={toggleLegend}\n          >\n            <MenuIcon />\n          </IconButton>\n        </Tooltip>\n        <Tooltip title=\"Turn off Scaling (Proteins must have min 3000 length)\">\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"scale\"\n            onClick={updateFullScale}\n            disabled={disableFullScale}\n          >\n            <AspectRatioIcon />\n          </IconButton>\n        </Tooltip>\n        <Typography variant=\"h6\" className={classes.title}>\n          Sun Lab\n        </Typography>\n        <div>\n          <Tooltip title=\"Increase Scaling Ratio\">\n            <IconButton\n              aria-label=\"account of current user\"\n              aria-controls=\"menu-appbar\"\n              aria-haspopup=\"true\"\n              disabled={fullScale}\n              onClick={evt => {\n                handleMenu(evt);\n                scaleVisualization();\n              }}\n              color=\"inherit\"\n            >\n              <LinearScaleIcon />\n            </IconButton>\n          </Tooltip>\n          <Menu\n            id=\"menu-appbar\"\n            anchorEl={anchorEl}\n            anchorOrigin={{\n              vertical: 'top',\n              horizontal: 'right'\n            }}\n            keepMounted\n            transformOrigin={{\n              vertical: 'top',\n              horizontal: 'right'\n            }}\n            open={open}\n            onClose={handleClose}\n            classes={{\n              paper: 'wide-menu'\n            }}\n          >\n            <MenuItem onClick={handleClose}>\n              <Typography id=\"discrete-slider\" gutterBottom>\n                Protein Scaling Factor\n              </Typography>\n            </MenuItem>\n            <MenuItem\n              onClick={handleClose}\n              classes={{ root: 'menuItem--large' }}\n            >\n              <Slider\n                defaultValue={1}\n                getAriaValueText={valueText}\n                aria-labelledby=\"discrete-slider\"\n                valueLabelDisplay=\"auto\"\n                step={1}\n                marks\n                min={1}\n                max={15}\n              />\n            </MenuItem>\n          </Menu>\n        </div>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nCustomAppBar.propTypes = {\n  toggleLegend: PropTypes.bool.isRequired,\n  scaleVisualization: PropTypes.func,\n  setScaleFactor: PropTypes.func,\n  toggleFullScale: PropTypes.func.isRequired,\n  disableFullScale: PropTypes.bool,\n  fullScale: PropTypes.bool\n};\n\nCustomAppBar.defaultProps = {\n  scaleVisualization: () => {},\n  setScaleFactor: () => {},\n  disableFullScale: false,\n  fullScale: false\n};\n\nexport default CustomAppBar;\n","import { csv } from 'd3';\nimport csvData from './proteins.csv';\n\nasync function getData() {\n  const data = await csv(csvData);\n  return data;\n}\n\nconst arrayStrConversion = str => {\n  const newStr = str.replace(/'/g, '\"');\n  const array = JSON.parse(newStr);\n  return array;\n};\n\nconst getProteins = async () => {\n  const proteinsData = [];\n  const proteins = await getData();\n  proteins.forEach(el => {\n    const protein = {};\n    protein.value = el['Entry name'];\n    protein.label = el['Entry name'];\n    protein.description = el['Protein names'];\n    protein.disulfideBonds = arrayStrConversion(el['Dislfide bond']);\n    protein.glycoslation = arrayStrConversion(el.Glycosylation);\n    protein.length = parseInt(el.Length, 10);\n    proteinsData.push(protein);\n  });\n  return proteinsData;\n};\n\nexport default { getProteins };\n","import React, { useState, useEffect } from 'react';\nimport { StylesProvider } from '@material-ui/core';\nimport Dropdown from './components/Dropdown';\nimport Visualization from './components/Visualization';\nimport CustomAppBar from './components/AppBar';\nimport './App.scss';\nimport parser from './parser';\n\nconst { getProteins } = parser;\n\nconst { innerWidth, innerHeight } = window;\n\nfunction App() {\n  const [currSelection, updateSelection] = useState(null);\n  const [scaleVisualization, setScaleVisualization] = useState(false);\n  const [isLegendOpen, setLegendState] = useState(true);\n  const [proteinOpts, setProteinOpts] = useState([]);\n  const [scaleFactor, setScaleFactor] = useState(1);\n  const [fullScale, setFullScale] = useState(false);\n  const [fullScaleDisabled, setFullScaleDisabled] = useState(true);\n\n  useEffect(() => {\n    getProteins().then(proteins => setProteinOpts(proteins));\n  }, []);\n\n  const updateScaleFactor = val => {\n    setScaleFactor(val);\n  };\n\n  const toggleScaling = () => {\n    setScaleVisualization(!scaleVisualization);\n  };\n\n  const updateSel = index => {\n    updateSelection(null);\n    setTimeout(() => updateSelection(index), 500);\n  };\n\n  const toggleLegend = () => {\n    setLegendState(!isLegendOpen);\n  };\n\n  const toggleFullScale = () => {\n    setFullScale(!fullScale);\n  };\n\n  return (\n    <StylesProvider injectFirst>\n      <div className=\"App\">\n        <CustomAppBar\n          toggleLegend={toggleLegend}\n          scaleVisualization={toggleScaling}\n          setScaleFactor={updateScaleFactor}\n          toggleFullScale={toggleFullScale}\n          disableFullScale={fullScaleDisabled}\n          fullScale={fullScale}\n        />\n        <div className=\"App-dropdown\">\n          {proteinOpts.length ? (\n            <Dropdown options={proteinOpts} updateSel={updateSel} />\n          ) : null}\n        </div>\n        {currSelection != null && Number.isInteger(currSelection) ? (\n          <Visualization\n            width={innerWidth}\n            height={innerHeight}\n            currSelection={currSelection}\n            isLegendOpen={isLegendOpen}\n            initialOptions={proteinOpts}\n            scaleFactor={scaleFactor}\n            fullScale={fullScale}\n            setFullScaleDisabled={setFullScaleDisabled}\n          />\n        ) : (\n          <div className=\"App-canvas\" />\n        )}\n      </div>\n    </StylesProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable no-undef */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/proteins.2080b9bf.csv\";"],"sourceRoot":""}