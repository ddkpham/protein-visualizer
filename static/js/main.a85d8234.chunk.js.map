{"version":3,"sources":["components/Dropdown/index.js","static/constants.js","components/Legend/index.js","parser/index.js","components/Visualization/index.js","components/AppBar/index.js","App.jsx","serviceWorker.js","index.js","parser/proteins.csv"],"names":["Dropdown","props","options","updateSel","console","log","inputLabel","useRef","useState","val","setValue","menuList","opts","menuItems","push","MenuItem","value","key","forEach","opt","idx","label","mItem","generateMenuItems","FormControl","variant","className","InputLabel","ref","id","Select","labelId","onChange","event","newVal","target","autoWidth","useStyles","makeStyles","root","Width","bullet","display","margin","transform","title","fontSize","textDecoration","pos","marginBottom","Legend","glycoslation","disulfideBonds","toggleGlyco","toggleSulfide","length","showGlyco","setShowGlyco","showSulfide","setShowSulfide","classes","handleToggle","bond","Card","CardContent","Typography","color","gutterBottom","IconButton","aria-label","onClick","defaultProps","getData","a","async","csv","csvData","data","arrayStrConversion","str","newStr","replace","JSON","parse","proteinsData","el","protein","description","Glycosylation","parseInt","Length","COLOR_PALLETE","constants","scaleMap","1","2","3","4","5","6","7","8","9","10","Visualization","height","initialWidth","width","currSelection","isLegendOpen","initialOptions","scaleFactor","scaleVisualization","SCALE_FACTOR","svgRef","showDisulfide","setShowDisulfide","pairRanking","array","pair","total","low","high","i","currLow","currHigh","calculateBondRanking","map","bondPos","split","atom","top","right","bottom","left","innerWidth","innerHeight","SULFIDE_POS","SPINE_HEIGHT","SPINE_START_POS","SPINE_WIDTH","xScale","scaleLinear","domain","range","bondHeight","renderVisualization","svg","select","style","g","append","attr","attachSpine","x","y","text","attachSulfides","CIRCLE_RADIUS","GLYCO_LINK_LENGTH","attachGlycoBonds","attachNTerminus","useEffect","selectAll","remove","document","getElementById","marginLeft","current","Number","isInteger","overflow","theme","flexGrow","menuButton","marginRight","spacing","CustomAppBar","toggleLegend","setScaleFactor","anchorEl","setAnchorEl","open","Boolean","handleClose","AppBar","Toolbar","edge","aria-controls","aria-haspopup","evt","currentTarget","Menu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","paper","Slider","defaultValue","getAriaValueText","aria-labelledby","valueLabelDisplay","step","marks","min","max","getProteins","parser","window","App","updateSelection","setScaleVisualization","setLegendState","proteinOpts","setProteinOpts","then","proteins","StylesProvider","injectFirst","index","setTimeout","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.a85d8234.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport './index.scss';\n\n/*\n * Drop down menu to select protein to visualize.\n */\nconst Dropdown = props => {\n  const { options, updateSel } = props;\n  console.log('TCL: options', options);\n  const inputLabel = useRef(null);\n  const [val, setValue] = useState('');\n\n  const handleChange = event => {\n    const {\n      target: { value: newVal }\n    } = event;\n    setValue(newVal);\n    updateSel(newVal);\n  };\n\n  const generateMenuItems = opts => {\n    const menuItems = [];\n    menuItems.push(\n      <MenuItem value=\" \" key=\"default\">\n        None\n      </MenuItem>\n    );\n\n    opts.forEach((opt, idx) => {\n      const { value, label } = opt;\n      const mItem = (\n        <MenuItem value={idx} key={`key${value}`}>\n          {label}\n        </MenuItem>\n      );\n      menuItems.push(mItem);\n    });\n    return menuItems;\n  };\n\n  const menuList = generateMenuItems(options);\n\n  return (\n    <FormControl variant=\"outlined\" className=\"drop-down\">\n      <InputLabel ref={inputLabel} id=\"demo-simple-select-outlined-label\">\n        Protein Name\n      </InputLabel>\n      <Select\n        labelId=\"demo-simple-select-outlined-label\"\n        id=\"demo-simple-select-outlined\"\n        value={val}\n        onChange={handleChange}\n        autoWidth\n      >\n        {menuList}\n      </Select>\n    </FormControl>\n  );\n};\n\nDropdown.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.object).isRequired,\n  updateSel: PropTypes.func.isRequired\n};\n\nexport default Dropdown;\n","const initialOptions = [\n  {\n    value: 'HLAA_HUMAN',\n    label: 'HLAA_HUMAN',\n    description:\n      'HLA class I histocompatibility antigen, A alpha chain (Human leukocyte antigen A) (HLA-A)',\n    disulfideBonds: ['125 188', '227 283'],\n    glycoslation: ['110'],\n    length: 365\n  },\n  {\n    value: 'ELNE_HUMAN',\n    label: 'ELNE_HUMAN',\n    description:\n      'Neutrophil elastase (EC 3.4.21.37) (Bone marrow serine protease) (Elastase-2) (Human leukocyte elastase) (HLE) (Medullasin) (PMN elastase)',\n    disulfideBonds: ['55 71', '151 208', '181 187', '198 223'],\n    glycoslation: ['88', '124', '173'],\n    length: 267\n  },\n  {\n    value: 'GRAB_HUMAN',\n    label: 'GRAB_HUMAN',\n    description:\n      'Granzyme B (EC 3.4.21.79) (C11) (CTLA-1) (Cathepsin G-like 1) (CTSGL1) (Cytotoxic T-lymphocyte proteinase 2) (Lymphocyte protease) (Fragmentin-2) (Granzyme-2) (Human lymphocyte protein) (HLP) (SECT) (T-cell serine protease 1-3E)',\n    disulfideBonds: ['49 65', '142 209', '173 188'],\n    glycoslation: ['71', '104'],\n    length: 247\n  }\n];\n\nconst COLOR_PALLETE = [\n  '#c76861',\n  '#e6c11e',\n  '#90de1b',\n  '#1bde97',\n  '#1bc7de',\n  '#1b66de',\n  '#421bde',\n  '#901bde',\n  '#d618d3',\n  '#d6186a'\n];\n\nexport default { initialOptions, COLOR_PALLETE };\n","import React, { useState } from 'react';\nimport {\n  Card,\n  CardContent,\n  Typography,\n  IconButton,\n  Button,\n  CardActions\n} from '@material-ui/core';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport PropTypes from 'prop-types';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport './index.scss';\n\nconst useStyles = makeStyles({\n  root: {\n    Width: 275\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)'\n  },\n  title: {\n    fontSize: 18,\n    textDecoration: 'underline'\n  },\n  pos: {\n    marginBottom: 12\n  }\n});\n\nfunction Legend(props) {\n  const {\n    glycoslation,\n    disulfideBonds,\n    toggleGlyco,\n    toggleSulfide,\n    length\n  } = props;\n  const [showGlyco, setShowGlyco] = useState(true);\n  const [showSulfide, setShowSulfide] = useState(true);\n  const classes = useStyles();\n  const bull = <span className={classes.bullet}>•</span>;\n  const handleToggle = bond => {\n    if (bond === 'sulfide') {\n      console.log('toggling sulfide');\n      toggleSulfide(!showSulfide);\n      setShowSulfide(!showSulfide);\n    } else {\n      toggleGlyco(!showGlyco);\n      setShowGlyco(!showGlyco);\n    }\n  };\n  return (\n    <Card variant=\"outlined\" classes={{ root: 'legend--wrapper' }}>\n      <CardContent>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          Legend\n        </Typography>\n        <div className=\"legend--menuItem\">\n          <Typography>\n            Total Glyco Bonds:\n            <Typography display=\"inline\" classes={{ root: 'bold-text' }}>\n              {glycoslation.length}\n            </Typography>\n          </Typography>\n          <div className={`button-visibility${showGlyco ? '--on' : '--off'}`}>\n            <IconButton\n              aria-label=\"delete\"\n              className={{ root: 'on' }}\n              onClick={() => handleToggle('glyco')}\n            >\n              <VisibilityIcon />\n            </IconButton>\n          </div>\n        </div>\n        <div className=\"legend--menuItem\">\n          <Typography>\n            Total Sulfide Bonds:\n            <Typography display=\"inline\" classes={{ root: 'bold-text' }}>\n              {disulfideBonds.length}\n            </Typography>\n          </Typography>\n          <div className={`button-visibility${showSulfide ? '--on' : '--off'}`}>\n            <IconButton\n              aria-label=\"delete\"\n              onClick={() => handleToggle('sulfide')}\n            >\n              <VisibilityIcon />\n            </IconButton>\n          </div>\n        </div>\n        <div className=\"legend--menuItem\">\n          <Typography>\n            Total Protein Length:\n            <Typography display=\"inline\" classes={{ root: 'bold-text' }}>\n              {length}\n            </Typography>\n          </Typography>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nLegend.propTypes = {\n  glycoslation: PropTypes.arrayOf(PropTypes.string).isRequired,\n  disulfideBonds: PropTypes.arrayOf(PropTypes.string).isRequired,\n  toggleGlyco: PropTypes.func,\n  toggleSulfide: PropTypes.func\n};\n\nLegend.defaultProps = {\n  toggleGlyco: () => {},\n  toggleSulfide: () => {}\n};\n\nexport default Legend;\n","import { csv } from 'd3';\nimport csvData from './proteins.csv';\n\nasync function getData() {\n  const data = await csv(csvData);\n  return data;\n}\n\nconst arrayStrConversion = str => {\n  const newStr = str.replace(/'/g, '\"');\n  const array = JSON.parse(newStr);\n  return array;\n};\n\nconst getProteins = async () => {\n  const proteinsData = [];\n  const proteins = await getData();\n  proteins.forEach(el => {\n    const protein = {};\n    protein.value = el['Entry name'];\n    protein.label = el['Entry name'];\n    protein.description = el['Protein names'];\n    protein.disulfideBonds = arrayStrConversion(el['Dislfide bond']);\n    protein.glycoslation = arrayStrConversion(el.Glycosylation);\n    protein.length = parseInt(el.Length, 10);\n    proteinsData.push(protein);\n  });\n  return proteinsData;\n};\n\nexport default { getProteins };\n","import React, { useRef, useEffect, useState } from 'react';\nimport {\n  select,\n  csv,\n  scaleLinear,\n  scaleBand,\n  axisLeft,\n  axisBottom,\n  selectAll\n} from 'd3';\nimport PropTypes from 'prop-types';\nimport constants from '../../static/constants';\nimport Legend from '../Legend';\nimport parser from '../../parser';\n\nimport './index.scss';\n\nconst CIRCLE_RADIUS = 5;\nconst SPINE_HEIGHT = 30;\n\nconst { COLOR_PALLETE } = constants;\n\nconst scaleMap = {\n  1: 1,\n  2: 2.5,\n  3: 2,\n  4: 1.9,\n  5: 2,\n  6: 2.2,\n  7: 2.5,\n  8: 2.9,\n  9: 3.6,\n  10: 4.6\n};\n\nconst calculateBondRanking = array => {\n  const pairRanking = [];\n  array.forEach((pair, idx) => {\n    let total = 1;\n    const [low, high] = pair;\n    for (let i = 0; i < array.length; i += 1) {\n      if (idx !== i) {\n        const [currLow, currHigh] = array[i];\n        if (low < currLow && high > currHigh) {\n          total += 1;\n        }\n        if (low < currLow && high > currLow && high < currHigh) {\n          total += 0.7;\n        }\n        if (low > currLow && low < currHigh && high > currHigh) {\n          total += 0.75;\n        }\n      }\n    }\n    pairRanking.push(total);\n  });\n  return pairRanking;\n};\n\nfunction Visualization(props) {\n  const {\n    height,\n    width: initialWidth,\n    currSelection,\n    isLegendOpen,\n    initialOptions,\n    scaleVisualization: test,\n    scaleFactor\n  } = props;\n  const scaleVisualization = scaleFactor !== 1;\n  const SCALE_FACTOR = scaleVisualization ? scaleFactor : 1;\n  const width = initialWidth * SCALE_FACTOR;\n  const svgRef = useRef(null);\n  const [showGlyco, setShowGlyco] = useState(true);\n  const [showDisulfide, setShowDisulfide] = useState(true);\n  const [showScale, setShowScale] = useState(false);\n  const { disulfideBonds, glycoslation } = initialOptions[currSelection];\n\n  const glycoBonds = initialOptions[currSelection].disulfideBonds.map(pair => {\n    const bondPos = [];\n    const atoms = pair.split(' ');\n    atoms.forEach(el => {\n      const atom = parseInt(el, 10);\n      bondPos.push(atom);\n    });\n    return bondPos;\n  });\n  const pairRanking = calculateBondRanking(glycoBonds);\n\n  const margin = {\n    top: height / 15,\n    right: width / 15,\n    bottom: height / 15,\n    left: width / 15\n  };\n  const innerWidth = width - margin.left - margin.right;\n  const innerHeight = height - margin.top - margin.bottom;\n  const SULFIDE_POS = innerHeight / 2 + SPINE_HEIGHT / 2;\n  const SULFIDE_BOND_LENGTH = 40;\n  const SULFIDE_ATOM_OFFSET = 20;\n\n  const GLYCO_STEM_LENGTH = 60;\n  const GLYCO_LINK_LENGTH = 10;\n  const SPINE_START_POS = 0.5 * margin.left;\n\n  const SPINE_WIDTH = scaleVisualization\n    ? innerWidth + SPINE_START_POS\n    : innerWidth + SPINE_START_POS;\n\n  const xScale = scaleLinear()\n    .domain([0, initialOptions[currSelection].length])\n    .range([SCALE_FACTOR * SPINE_START_POS, SPINE_WIDTH]);\n\n  const bondHeight = idx => {\n    const bHeight = SULFIDE_POS + SULFIDE_BOND_LENGTH * pairRanking[idx];\n    return bHeight;\n  };\n\n  const attachGlycoBonds = g => {\n    const { glycoslation } = initialOptions[currSelection];\n\n    const gBonds = glycoslation.map(el => parseInt(el, 10));\n    gBonds.forEach(el => {\n      const atom = g.append('text');\n\n      atom\n        .attr('dx', xScale(el) - 5)\n        .attr('dy', SULFIDE_POS + 5)\n        .text(() => `N`)\n        .attr('class', 'glyco-labels');\n\n      const pos = g.append('text');\n      pos\n        .attr('dx', xScale(el) + 3)\n        .attr('dy', SULFIDE_POS + 7)\n        .text(() => `${el}`)\n        .attr('class', 'glyco-labels--pos');\n\n      const stem = g.append('line');\n      stem\n        .attr('x1', xScale(el))\n        .attr('y1', SULFIDE_POS - 10)\n        .attr('x2', xScale(el))\n        .attr('y2', SULFIDE_POS - GLYCO_STEM_LENGTH)\n        .style('stroke', 'black');\n\n      const mol1 = g.append('circle');\n      mol1\n        .attr('cx', xScale(el))\n        .attr('cy', SULFIDE_POS - GLYCO_STEM_LENGTH)\n        .attr('r', CIRCLE_RADIUS + 3)\n        .style('stroke', 'black')\n        .style('fill', 'black');\n\n      const link = g.append('line');\n      link\n        .attr('x1', xScale(el))\n        .attr('y1', SULFIDE_POS - GLYCO_STEM_LENGTH)\n        .attr('x2', xScale(el))\n        .attr('y2', SULFIDE_POS - GLYCO_STEM_LENGTH - GLYCO_LINK_LENGTH * 2)\n        .style('stroke', 'black');\n\n      const link2 = g.append('line');\n      link2\n        .attr('x1', xScale(el))\n        .attr('y1', SULFIDE_POS - GLYCO_STEM_LENGTH - GLYCO_LINK_LENGTH * 2)\n        .attr('x2', xScale(el))\n        .attr('y2', SULFIDE_POS - GLYCO_STEM_LENGTH - GLYCO_LINK_LENGTH * 3.5)\n        .style('stroke', 'black');\n      const link3 = g.append('line');\n      link3\n        .attr('x1', xScale(el))\n        .attr('y1', SULFIDE_POS - GLYCO_STEM_LENGTH - GLYCO_LINK_LENGTH * 3.5)\n        .attr('x2', xScale(el))\n        .attr('y2', SULFIDE_POS - GLYCO_STEM_LENGTH - GLYCO_LINK_LENGTH * 4.5)\n        .style('stroke', 'black');\n\n      const mol2 = g.append('circle');\n      mol2\n        .attr('cx', xScale(el))\n        .attr('cy', SULFIDE_POS - GLYCO_STEM_LENGTH - GLYCO_LINK_LENGTH * 2)\n        .attr('r', CIRCLE_RADIUS + 3)\n        .style('stroke', 'black')\n        .style('fill', 'grey');\n\n      const mol3 = g.append('rect');\n      mol3\n        .attr('width', 14)\n        .attr('height', 14)\n        .attr('x', xScale(el) - 7)\n        .attr('y', SULFIDE_POS - GLYCO_STEM_LENGTH - GLYCO_LINK_LENGTH * 5)\n        .style('fill', 'white')\n        .style('stroke', 'black');\n    });\n  };\n\n  const attachSulfides = g => {\n    const { disulfideBonds } = initialOptions[currSelection];\n\n    const bonds = disulfideBonds.map(pair => {\n      const bondPos = [];\n      const atoms = pair.split(' ');\n      atoms.forEach(el => {\n        const atom = parseInt(el, 10);\n        bondPos.push(atom);\n      });\n      return bondPos;\n    });\n\n    bonds.forEach((pair, idx) => {\n      const [x, y] = pair;\n      pair.forEach(el => {\n        const atom = g.append('circle');\n        atom\n          .attr('cx', xScale(el))\n          .attr('cy', SULFIDE_POS)\n          .attr('r', CIRCLE_RADIUS)\n          .style('stroke', 'black')\n          .style('fill', COLOR_PALLETE[idx % COLOR_PALLETE.length]);\n\n        console.log('TCL: idx -> xScale(el)', idx, xScale(el));\n\n        const bond = g.append('line');\n        bond\n          .attr('x1', xScale(el))\n          .attr('y1', SULFIDE_POS + 20)\n          .attr('x2', xScale(el))\n          .attr('y2', bondHeight(idx))\n          .style('stroke', 'black');\n        const sulfide = g.append('text');\n        sulfide\n          .attr('dx', xScale(el) - 5)\n          .attr('dy', bondHeight(idx) + SULFIDE_ATOM_OFFSET)\n          .text(() => 'S');\n\n        const pos = g.append('text');\n        pos\n          .attr('dx', xScale(el) + 4)\n          .attr('dy', bondHeight(idx) + SULFIDE_ATOM_OFFSET + 5)\n          .text(() => `${el}`)\n          .attr('class', 'sulfide-labels--pos');\n      });\n      const link = g.append('line');\n      link\n        .attr('x1', xScale(x))\n        .attr('y1', bondHeight(idx))\n        .attr('x2', xScale(y))\n        .attr('y2', bondHeight(idx))\n        .style('stroke', 'black');\n    });\n  };\n\n  const attachSpine = g => {\n    const spineBase = g.append('rect');\n    spineBase\n      .attr('width', innerWidth)\n      .attr('height', SPINE_HEIGHT)\n      .attr('x', SCALE_FACTOR * SPINE_START_POS)\n      .attr('y', innerHeight / 2)\n      .style('fill', 'white')\n      .style('stroke', 'black');\n  };\n\n  const attachNTerminus = g => {\n    const NTerm = g.append('text');\n    NTerm.attr('dx', SCALE_FACTOR * SPINE_START_POS - 50)\n      .attr('dy', innerHeight / 2 + 20)\n      .text(() => 'NH2--');\n  };\n\n  const renderVisualization = () => {\n    const svg = select('#svg');\n    svg.style('background-color', 'white');\n\n    const g = svg.append('g');\n    g.attr('transform', `translate(${margin.left}, ${margin.top})`);\n    attachSpine(g);\n    if (showDisulfide) {\n      attachSulfides(g);\n    }\n    if (showGlyco) {\n      attachGlycoBonds(g);\n    }\n    attachNTerminus(g);\n  };\n  const removeElements = () => {\n    const svgEls = ['text', 'line', 'circle', 'rect'];\n    svgEls.forEach(el => {\n      const allNodes = selectAll(el);\n      allNodes.remove();\n    });\n  };\n\n  useEffect(() => {\n    removeElements();\n    renderVisualization();\n    if (scaleVisualization) {\n      document.getElementById('svg').style.marginLeft =\n        innerWidth / scaleMap[scaleFactor];\n    } else {\n      document.getElementById('svg').style.marginLeft = 0;\n    }\n  }, [\n    svgRef.current,\n    showDisulfide,\n    showGlyco,\n    scaleVisualization,\n    scaleFactor\n  ]);\n\n  const svg = Number.isInteger(currSelection) ? (\n    <svg\n      height={`${height}`}\n      width={`${width + margin.left}`}\n      ref={svgRef}\n      id=\"svg\"\n      overflow=\"visible\"\n    >\n      <rect />\n    </svg>\n  ) : null;\n\n  return (\n    <div className=\"svg-wrapper\">\n      {isLegendOpen ? (\n        <Legend\n          glycoslation={glycoslation}\n          disulfideBonds={disulfideBonds}\n          toggleGlyco={setShowGlyco}\n          toggleSulfide={setShowDisulfide}\n          length={initialOptions[currSelection].length}\n        />\n      ) : null}\n      {svg}\n    </div>\n  );\n}\n\nVisualization.propTypes = {\n  isLegendOpen: PropTypes.bool,\n  initialOptions: PropTypes.arrayOf(PropTypes.object).isRequired,\n  height: PropTypes.number,\n  width: PropTypes.number,\n  currSelection: PropTypes.number.isRequired,\n  scaleVisualization: PropTypes.bool,\n  scaleFactor: PropTypes.number\n};\n\nVisualization.defaultProps = {\n  isLegendOpen: false,\n  scaleVisualization: false,\n  scaleFactor: 1,\n  height: 500,\n  width: 500\n};\n\nexport default Visualization;\n","import React, { useState } from 'react';\nimport {\n  AppBar,\n  MenuItem,\n  Typography,\n  IconButton,\n  Menu,\n  Toolbar\n} from '@material-ui/core';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport LinearScaleIcon from '@material-ui/icons/LinearScale';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Slider from '@material-ui/core/Slider';\nimport './index.scss';\nimport PropTypes from 'prop-types';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  }\n}));\n\nfunction CustomAppBar(props) {\n  const { toggleLegend, scaleVisualization, setScaleFactor } = props;\n  const classes = useStyles();\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = Boolean(anchorEl);\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  const handleMenu = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const valueText = val => {\n    setScaleFactor(val);\n    return `${val}x`;\n  };\n\n  return (\n    <AppBar>\n      <Toolbar>\n        <IconButton\n          edge=\"start\"\n          className={classes.menuButton}\n          color=\"inherit\"\n          aria-label=\"menu\"\n          onClick={toggleLegend}\n        >\n          <MenuIcon />\n        </IconButton>\n        <Typography variant=\"h6\" className={classes.title}>\n          Sun Lab\n        </Typography>\n        <div>\n          <IconButton\n            aria-label=\"account of current user\"\n            aria-controls=\"menu-appbar\"\n            aria-haspopup=\"true\"\n            onClick={evt => {\n              handleMenu(evt);\n              scaleVisualization();\n            }}\n            color=\"inherit\"\n          >\n            <LinearScaleIcon />\n          </IconButton>\n          <Menu\n            id=\"menu-appbar\"\n            anchorEl={anchorEl}\n            anchorOrigin={{\n              vertical: 'top',\n              horizontal: 'right'\n            }}\n            keepMounted\n            transformOrigin={{\n              vertical: 'top',\n              horizontal: 'right'\n            }}\n            open={open}\n            onClose={handleClose}\n            classes={{\n              paper: 'wide-menu'\n            }}\n          >\n            <MenuItem onClick={handleClose}>\n              <Typography id=\"discrete-slider\" gutterBottom>\n                Protein Scaling Factor\n              </Typography>\n            </MenuItem>\n            <MenuItem\n              onClick={handleClose}\n              classes={{ root: 'menuItem--large' }}\n            >\n              <Slider\n                defaultValue={1}\n                getAriaValueText={valueText}\n                aria-labelledby=\"discrete-slider\"\n                valueLabelDisplay=\"auto\"\n                step={1}\n                marks\n                min={1}\n                max={10}\n              />\n            </MenuItem>\n          </Menu>\n        </div>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nCustomAppBar.propTypes = {\n  toggleLegend: PropTypes.bool.isRequired,\n  scaleVisualization: PropTypes.func\n};\n\nCustomAppBar.defaultProps = {\n  scaleVisualization: () => {}\n};\n\nexport default CustomAppBar;\n","import React, { useState, useEffect } from 'react';\nimport { StylesProvider } from '@material-ui/core';\nimport Dropdown from './components/Dropdown';\nimport constants from './static/constants';\nimport Visualization from './components/Visualization';\nimport CustomAppBar from './components/AppBar';\nimport './App.scss';\nimport parser from './parser';\n\nconst { getProteins } = parser;\n\n// const { initialOptions } = constants;\n\nconst { innerWidth, innerHeight } = window;\n\nfunction App() {\n  const [currSelection, updateSelection] = useState(null);\n  const [scaleVisualization, setScaleVisualization] = useState(false);\n  const [isLegendOpen, setLegendState] = useState(true);\n  const [proteinOpts, setProteinOpts] = useState([]);\n  const [scaleFactor, setScaleFactor] = useState(1);\n  console.log('TCL: App -> scaleFactor', scaleFactor);\n\n  useEffect(() => {\n    getProteins().then(proteins => setProteinOpts(proteins));\n  }, []);\n\n  const updateScaleFactor = val => {\n    setScaleFactor(val);\n  };\n\n  const toggleScaling = () => {\n    setScaleVisualization(!scaleVisualization);\n  };\n\n  const updateSel = index => {\n    updateSelection(null);\n    setTimeout(() => updateSelection(index), 500);\n  };\n\n  const toggleLegend = () => {\n    setLegendState(!isLegendOpen);\n  };\n\n  return (\n    <StylesProvider injectFirst>\n      <div className=\"App\">\n        <CustomAppBar\n          toggleLegend={toggleLegend}\n          scaleVisualization={toggleScaling}\n          setScaleFactor={updateScaleFactor}\n        />\n        <div className=\"App-dropdown\">\n          {proteinOpts.length ? (\n            <Dropdown options={proteinOpts} updateSel={updateSel} />\n          ) : null}\n        </div>\n        {currSelection != null && Number.isInteger(currSelection) ? (\n          <Visualization\n            width={innerWidth}\n            height={innerHeight}\n            currSelection={currSelection}\n            isLegendOpen={isLegendOpen}\n            initialOptions={proteinOpts}\n            scaleVisualization={scaleVisualization}\n            scaleFactor={scaleFactor}\n          />\n        ) : (\n          <div className=\"App-canvas\" />\n        )}\n      </div>\n    </StylesProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable no-undef */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/proteins.2080b9bf.csv\";"],"sourceRoot":""}